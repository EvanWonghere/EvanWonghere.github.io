[{"content":"阅读时间：2025-01-21 阅读目标：了解何为谜题、解密游戏和其他游戏的区别、如何设计好的谜题。 本篇摘要 ​\t作者给谜题下了定义：\n谜题是有趣的 谜题有一个正确答案 ​\t而如何让一个谜题有趣呢？作者给出以下三点：\n小说\n不要太简单或太难\n小把戏\n而让谜题有一个正确答案是为了区分谜题和其他娱乐形式，并给出他们之间的关系，据此得到判断谜题设计好坏的工具。\n主要内容与要点 什么是谜题？ ​\t作者最喜欢的谜题的定义是：\n谜题是有趣的\n这说明了谜题是一种玩法\n谜题有一个正确答案\n这区分了谜题和其他形式的玩法，比如游戏和玩具\n这个定义甚至是迷惑性的简单，但也带来很多有趣的效果。\n好玩吗？ ​\t给出了一些让谜题变得更好玩的东西。\n小说\n玩开始于怀疑日常生活中的规则，那一些熟悉的东西再加一些小说氛围，是一种让人玩得好的方式。\n不要太简单，不要太难\n太简单的谜题让人失望，太难的谜题让人受挫。不要太高估玩家，也不要太低估玩家。\n小把戏\n让谜题是「反直觉的」，或者说「改变常用的诠释方式」，类似于推理小说中的「叙述诡计」。\n​\t人们对好玩的感觉是主观的，好不好玩取决于参与者的眼光，但作者认为反而更兴奋的是「在这世界上的每一个问题，无论多么乏味，总会有人想要去解决它」。\n它有正确答案吗？ ​\t当答案公布时，绝大多数人都认可这是最佳答案，那么它就是有答案的。但有时候可能仍有漏洞，这就需要额外填补。\n谜题之于游戏 ​\t前面说过「拥有一个正确答案」是为了区别谜题和游戏以及其他玩法。Chris Forward 给出了多种玩法类型的关系。\n​\t这样的结构使我们获得一个判断谜题设计师好坏的好工具：要做一个好的谜题，先要做一个好的玩具。玩家应该能在操作谜题中得到乐趣，即使他们还不能得到一个解法。\n设计谜题 谜题有两方面，一方面是谜题游戏中的关卡设计，以一个固定的规则为基础来制作一个特定的谜题；另一方面是规则设计，发明整体使用的规则、目标和谜题形式。 总的来说谜题设计和游戏设计拥有一样的目标：让玩家在一个享受并同时拥有挑战的状态中。 书中案例与引申 书中给了一个谜题，我认为的确是很简单小巧但是不失精致，挺有趣的。\n已知该字母不是 L，那么是什么呢？\n答案是「F」，是一个很巧妙的答案，很多人在尝试还原的时候估计都不会想到折叠过来的部分下面还有一个部分！这运用到了作者给出的让谜题变得好玩的技巧里的「不要太简单也不要太难」和「小把戏」，并且也完全符合作者提出来的谜题的定义！\n我的思考与疑问 如果我的谜题是为了剧情服务，那我应该如何入手设计？\n叙事解谜不需要核心机制，每道题与每道题之间相对独立，没有内在的联系。解谜的逻辑是一种天然的、生活化的逻辑。\n书中问题 发明一个电脑谜题，灵感源自于今日的新闻头条。至少两个关卡，一个简单一个难。作出纸面原型并让其他人测试并改进。 精选摘录 「玩开始于怀疑日常生活中的规则，能放纵我们去做不使用的事情。」 「太简单的谜题让人失望，太难的谜题让人受挫。」 「对你来说是每天的麻烦问题，对其他人来说或许是一个有趣的谜题。」 「在这世界上的每一个问题，无论多么乏味，总会有人会想要去解决它。」 「如果玩家本身没有娱乐精神，即使是最好的游戏也可能被毁掉。」 「玩家是愿意改变游戏规则来让游戏每个人都觉得游戏好玩的。」 「要做一个好的谜题，首先要做一个好的玩具。」 「玩家应该能够在操作谜题中得到乐趣，即使他们还不能得到一个解法。」 本章小结与感想 ​\t学到了关于谜题的定义以及评判和设计谜题的一些方法，正好我打算这段时间开发一个叙事解谜游戏，或许会有所帮助。\n","date":"2025-01-21T00:00:00Z","image":"http://localhost:1313/p/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A2%A6%E5%B7%A5%E5%8E%82%E7%AC%AC%E4%B8%80%E7%AF%87%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%9D%E5%A4%96%E7%AF%87/cover_hu_d78e1df053c2a7d7.png","permalink":"http://localhost:1313/p/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A2%A6%E5%B7%A5%E5%8E%82%E7%AC%AC%E4%B8%80%E7%AF%87%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%9D%E5%A4%96%E7%AF%87/","title":"游戏设计梦工厂，第一篇第二章额外篇"},{"content":"阅读时间：2025-01-19 阅读目标：了解游戏如何运转及为什么玩家会玩游戏 本章摘要 主要内容与要点 Formal Elements ​\t一般译作「形式元素」或「正规元素」，是用于区分游戏和其他事物的元素，对设计师来说是非常重要且需要理解的概念，因为其提供了游戏的结构和形式。下一章会更详细讲解，本章主要介绍以下元素：\nPlayer 玩家\n游戏与其他娱乐方式最明显的区别就是，它是被设计为需要消费者参与其中的。「玩家」这个概念都是自愿参与和使用这个娱乐环境的，自愿接受游戏的规则和限制。这也被称为「Lusory 态度」。\nObjectives 目标\n目标就是玩家要达成的任务或达到的结果。玩家对实现游戏中目标的渴望就是我们衡量玩家对游戏有多投入的一个标准。\nProcedure 程序/流程\n由于有多种翻译，这里就称 procedure。Procedure 是游戏规定的玩的行为或方式，指引玩家的行动，创造了游戏之外几乎不可能发生的互动。\nRules 规则\n规则定义了游戏的物品和概念，并限制玩家的行为和互动对象，并且实际上定义了游戏边界。\nResources 资源\n资源就是由于可以帮助玩家实现目标的有限资源。\nConflict 冲突\n玩家的目标规则、程序的关系限制指引了玩家的行为，创造了游戏的另一个与其他行为的区别——冲突，玩家需要努力解决冲突才能实现目标。冲突也是游戏的驱动力。\nBoundaries 边界\n游戏就是一个「魔法圈 magic circle」，发生在临时世界中，运行着游戏的规则，而不存在于现实世界中。边界定义了游戏世界和现实世界的分界线。\nOutcome 结果\n游戏的结果是最终达到的状态，通常与玩家的目标相关。不确定的结果在以玩法为核心的流程中很重要，因为这是玩家动力的一个关键因素。游戏设计师的职责就是设计出一个满意的游戏结果，通常来说是一个可衡量但不相等的结果。\nDramatic Elements ​\t一般译作「戏剧元素」，是让玩家能对游戏产生情感连接的元素，通过在 formal elements 中创作戏剧化内容，使玩家在情感上投入。同样的在第四章会更加详细地讲解，本章主要介绍：\nChallenge 挑战\n游戏会制造冲突，并且玩家必须以游戏乐意的方式解决冲突。这些冲突挑战玩家，在玩家解决问题时创造紧张感。平衡玩家对挑战的情感反应是让玩家持续投入游戏的关键。\nPlay 玩\nSalen 和 Zimmerman 定义 「玩」为「在一个限定的结构中的自由行动」，这启示我们可以利用游戏系统提供给玩家形式更加自由的互动来实现游戏中的目标。要设计能吸引你的玩家的那种玩法类型，同时在更严谨的游戏框架内还要给玩家设计一些自由度，这是另一个让玩家投入游戏的关键思考点。\nPremise 前设/背景设定\nPremise 给 formal elements 提供了内容，最基本的目的是让玩家更容易理解他们选择的处境，同时还是一个让玩家情感上投入到 formal elements 互动中的一个强有力的工具。\nCharacter 角色\n在传统的故事叙事中，角色是体验一个戏剧故事的替身，而在游戏中也可以是一样的，通过角色做替身来体验游戏角色的生活。角色还可以成为玩家参与游戏的容器，是体验处境和冲突的介入点。\nStory 故事\n游戏叙事的核心，结合 formal elements 创造出的环境让玩家投入，会随着游戏进程展开。故事如何结合游戏一直在争论，但是明确的是故事和玩法结合可以产生出强大的情感影响。\nDynamic Elements ​\t本章只用几段话简单介绍了「把游戏看作是动态系统」的想法，在第五章会更详细介绍。本章里主要说的是： 游戏是一个系统——一组互相关联的元素组合在一起形成一个复杂的整体。思考游戏系统时要注意「整体优于各个部分的总和」，意思是一个系统由于内部元素的关系，当它们运行起来时，成为了新维度的事物。所有游戏元素在被人运行和操作之前，都只是形成了一个「初始的潜在游戏」，在玩家玩游戏时会出现什么是我们无法预知的。这样的现象也被称为「Emergence 涌现」，原文并未说明，不知本书后续是否会提及此概念。\n什么是谜题？ ​\t书中特别摘录了 Scott Kim 写的《什么是谜题？》，关于此文章的笔记和思考我将另开一文，在此篇中不讨论。\n定义游戏 ​\t本书给出了游戏的三个定义：\n「一个游戏是一个封闭的、正规（formal）的系统。」\n​\t前面说过游戏是存在边界的，是和现实世界分开的，因此「游戏是封闭的」。\n​\t游戏拥有正规元素（formal elements）而不是其他形式的互动，这些元素是相互关联的，因此「游戏是正规系统 formal system」。\n「游戏让玩家投入于有结构的冲突中。」\n​\t游戏的整个目的就是让玩家投入，没有玩家就没有游戏的意义。而让玩家投入的方式就是让玩家参与到 formal elements 和 dramatic element 构成的冲突中，挑战玩家实现目标，因此「游戏让玩家投入与有结构的冲突中」。\n「游戏以一种不平等的方式来解决游戏的不确定性。」\n​\t游戏的一个本质就是「不确定性」，游戏还能够结束这种不确定性，通过不平等的结果来解决不确定性。\n超越定义 ​\t游戏的定义之外还有什么？现在有很多各种类型的游戏，超越了娱乐，设计教育、培训、政治、健康、人生追求、艺术、建筑等等领域，因此出现了「游戏化」这个概念，想要把「玩和重要的想法结合起来」。\n书中案例与引申 《钓鱼》和《雷神之锤》的比较\n​\t这两个游戏截然不同，一个是使用实体扑克牌进行线下游玩的回合制多人卡牌游戏，一个是 3D 的 FPS 游戏，需要有软件和电脑。一个有公开的玩法，人人都能玩的游戏，一个是有版权的软件产品。但是这两者之间在个更深层次上是有相似点的，据此引出 formal elements，更加说明这是游戏的基础。\n我的疑问与思考 Procedure 和 Rules 的区别是什么？有什么联系？\n​\t这两个的区别就在于，「rules」告诉你什么能做、什么不能做，也就是 「what (not) to do」，而「procedure」告诉你如何去和游戏进行交互，游戏如何进行下去，也就是「how to do」。一个是静态的框架，一个是动态的描述。\nObjectives 和 Outcome 的区别和界限？\n​\t「目标」和「结果」是不同的，比如多人游戏中，多个玩家都可以完成目标，但结果只能有一个玩家胜出或被淘汰；就算是单人游戏，也会出现玩家并没有达成目标而导致失败的结果。\n​\t个人认为「结果」就是「结局」，而「目标」是达成某个「结果」的指向。一个在游戏过程中一直存在，告诉玩家「应该朝着什么方向去做」，是动态的；一个在游戏结束时才确定，告诉玩家「做得怎么样」，是静态的。\nConflict 和 Challenge 的区别和界限？\n​\t「冲突」是预设好的、来自系统的困难和障碍，是静态的，是游戏规则和结构的一部分。\n​\t「挑战」是动态的，是玩家在游玩过程中，与「冲突」动态交互产生的「困难体验」，是「冲突」的实际效果。\n一定要存在 Objectives 和 Outcome 吗？\n​\t个人认为，并不是一定要存在的，就比如经典游戏 Minecraft，游戏并没有实际意义上的结局，打败末影龙其实也不算，尽管能获得「The End」这个成就，但是游戏远没有结束，不然官方也不会更新末地折跃门等。Minecraft 也没有实际意义上的目标，硬要说有的话，那我认为也是「Explore and Craft」，也非传统意义的目标。因此，在很多高自由度的游戏中，「目标」和「结果」并不是必要的，或者说是「更加非传统更加抽象的概念」，由玩家自行发掘和体验，并不由设计师强行施加给玩家。\n电子竞技算是体育，那么体育竞技算游戏吗？\n​\t我认为从定义上来说，是的，但不完全是。让我们根据三条定义一条条分析，都以 100m 跑为例：\n体育竞技是封闭的 formal system\n​\t体育竞技具有 formal elements，有玩家——运动员，有目标——跑得尽量快，有 procedure——准备、鸣枪、跑步、冲线，有规则——详见国际田联有关文件，有资源——运动员的设备资源、教练资源、医疗资源等，有冲突——只有一个运动员能够拿第一，有边界——在固定的时间固定的场所固定的规则，有结果——最终的成绩。\n体育竞技让玩家投入与有结构的冲突中\n​\t有多方面的挑战，来自同台运动员、场地的适应程度、自身的热身程度等。\n体育竞技以一种不平等的方式来解决游戏的不确定性\n​\t每个运动员的状态得无法稳定恒久保持，之前默默无名的小将有可能突然跑出好成绩，而顶级运动员也可能中途拉伤或者抢跑被罚下等，是充满不确定性的，而且一定会分出高低名次，因此是使用不平等的方式来解决。\n​\t但是，虽然竞技体育在一定程度上是封闭的，场上争破头场下还可能是好朋友，但是不可否定的，竞技体育的结果会对现实世界产生影响，这似乎不太符合，但也不是所有竞技体育都对现实世界有影响，或者说很多比赛对现实世界的影响有限，界限还是比较模糊的，因此或许可以定义为「具有社会影响价值的」、「现实化的」游戏。\n阅读电子书不算游戏，那为什么「剧情游戏」算游戏呢？\n​\t首先题目是我随便想的，其实我觉得并不全对，有些书籍已经完全算是模糊了「游戏」与「阅读」的界限了，比如《S.》、《胜者出局》等，有兴趣者可以自行了解。\n​\t言归正传，我认为主要区别在于「dramatic elements 带来的互动性和代入感」。\n​\t剧情游戏通常将玩家与主角绑定在一起，让玩家称为故事的一部分，以主角的视角体验剧情，而读书时读者通常处于「上帝视角」，以旁观者的身份观察和理解角色与故事。剧情游戏里的冲突或因玩家的选择而引发和解除，玩家的选项会推进故事发展，还可能具有多结局，而读书只是在被动跟着剧情走。剧情游戏还会通过音乐、画面效果等来强化体验和沉浸感，而读书基本靠“脑补“。\n书中问题 问题 1: 想一个游戏\n想想玩过的任何一款游戏，然后将游戏的描述写下来。写详细一些，假设是给从来没有玩过此类型的游戏的人写的。\n《艾尔登法环》，玩家需要操控「褪色者」，获得并使用强力的武器、魔法、祷告、骨灰、道具等来击败通往「黄金树」路上的一个个 BOSS，最终杀死在黄金树内部的最终 BOSS，成为「交界地」的新王。\n「褪色者」具有等级系统，可消耗「卢恩」进行升级获得各种属性点，卢恩还可以购买道具等，武器都可以消耗不同「锻造石」进行强化，骨灰也可以通过消耗不同的「墓地铃兰」进行强化，基本属性条包括血量、蓝量、体力条。\n现在想一个完全不同类型的游戏，越不同越好，用同样的方法描述这个游戏。\n《疑案追声》，玩家通过使用「声探」系统，操纵虚拟人物倾听案发现场不同人说的话和各种声音来协助破案，可以回溯、暂停、快进等，也可以在某个时间点进行标记。\n比较这两份描述，其中有哪些元素相同、不同？深入地思考两款游戏的机制分别是什么。\n相同的元素有可操纵的主角、都具有剧情、都有目标；不同在于《艾尔登法环》具有动作部分、是开放大世界，《疑案追声》具有解谜机制、时间操纵机制。\n问题 2: 描述玩家会怎样开始玩《钓鱼》或《雷神之锤》。在每种情况下他们需要怎么做——社交、进程或技巧？刚开始玩卡牌游戏和刚开始玩动作游戏的玩家肯定会很不同，但是这其中是不是还有相似点呢？如果有，描述这些相似点。\n问题 3: 列举五款游戏，并用一句话分别描述每款游戏的目标。\n《山河旅探》，探寻哥哥死亡的真相。\n《TOEM》，拍摄到 TOEM。\n《艾尔登法环》，当上艾尔登之王。\n《暗喻幻想》，找到拯救王子的方法，揭穿并阻止路易。\n《塞尔达传说：王国之泪》，打败魔王加侬多夫并拯救塞尔达公主。\n问题 4: 你可以想象出一个没有规则的游戏吗？如果有，描述这个游戏。只有一个规则的游戏会怎么样呢？为什么这个练习很难？\n没有规则的游戏我认为是不存在的，只要存在「边界」就一定有规则。\n而只有一个规则的游戏，无疑会是混乱不堪的，没有足够的规则，就无法规定好目标，无法制造足够的冲突，也就不会是个好游戏。\n这个练习难在，规则越少那么就越难划分一个好的边界。\n问题 5: 对比足球和扑克牌的冲突。分别描述两款游戏如何给玩家制造冲突。\n足球的冲突主要来自与对方球员的相互竞争，以及己方队友可能出现的失误。\n扑克牌的冲突主要来自机制，手牌的获取基本全靠运气，极大加强了不确定性。\n问题 6: 列举三个你觉得特别有挑战的游戏，并说说为什么。\n问题 7: Risk、Clue、Pit 和 《吉他英雄》的游戏 premise 是什么？如果你不知道这些游戏，找一些你更加熟悉的游戏来进行研究。\n问题 8: 有没有哪款游戏中的故事曾把你紧紧抓住，让你产生触动了，或激发了你的灵感呢？如果有，为什么？如果没有，又为什么？\n《我在七年后等着你》，这是我第一个玩哭的游戏，爱情与相互拯救让我无法控制自己。\n精选摘录 「这两个描述中最明显的相同点就是，它们都是为玩家设计的。」 「如果你没有遵守这些规则，那么在现实中，你就已经不是在玩这个游戏了。」 「这些让游戏体验和其他体验不同的界限可以作为我们区别游戏的另一方法。」 「其中最有影响力的是把游戏看作经济学、行为心理学、社会学和人类学的研究冲突。」 「让我感到兴奋的想法是，在这世界上的每一个问题，无论多么乏味，总有人会想要去解决它。」 「“拥有一个正确答案”的目的是为了区别谜题和游戏与其他玩法。」 「把你在这里读到的所有内容当作是一个你可以跳跃的起点，一个为你远征游戏设计世界准备的发射台，把玩家带到不可思议的地方。」 本章小结与感想 ​\t本章简单介绍了 FDD 理论，并为游戏提供了一个有用的定义，但并不是总体的游戏的绝对定义，因为随着新一代设计师对游戏边缘的不断探索，不断的新领域正在涌现。但是提供的定义对游戏分析和设计都很重要。\n","date":"2025-01-19T00:00:00Z","image":"http://localhost:1313/p/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A2%A6%E5%B7%A5%E5%8E%82%E7%AC%AC%E4%B8%80%E7%AF%87%E7%AC%AC%E4%BA%8C%E7%AB%A0/cover_hu_d78e1df053c2a7d7.png","permalink":"http://localhost:1313/p/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A2%A6%E5%B7%A5%E5%8E%82%E7%AC%AC%E4%B8%80%E7%AF%87%E7%AC%AC%E4%BA%8C%E7%AB%A0/","title":"游戏设计梦工厂，第一篇第二章"},{"content":"阅读时间：2025 年 1 月 18 日 阅读目标：探寻如何成为一名游戏设计师以及需要的技能等。 本章摘要 ​\t本章主要回答“如何成为一名游戏设计师？”、“需要什么样的才能和技巧？”、“在这个过程中需要做什么？”、“什么才是最好的游戏设计方法？”这几个问题。\n​\t针对第一个问题，最重要的就是「与玩家站在同一阵营」，好的核心玩法才是游戏的本质，游戏设计师的注意力应该集中在玩家体验上。因此游戏测试者也十分重要，他们直接告诉你你的游戏的体验，出色的游戏设计师应该为玩家创造一种有潜力的体验，布置好游戏世界内容后让玩家亲自体验，而不是想着掌控游戏的所有功能和细节，试玩是了解自己游戏表现力最好的方法，是整个游戏设计过程的心脏。游戏在反复测试和仔细观察中进化，让游戏进化成为超越自己最初想法的游戏是游戏设计师的职责，不是一成不变，而是孕育出新的生命，「这就是游戏设计的艺术」。\n​\t针对第二个问题，游戏设计师首先需要具备的基本特征就是对游戏和玩的热情。然后，最重要的技能是和所有团队成员进行清楚、高效的交流，同时做一个好的听众和妥协者，并且妥协是一件必要的事，你的职责就是在妥协的情况下把游戏做得流畅和成功。在此之上，需要优秀的团队合作和工作流，你需要保证「所有不同类型的人确实是在为同一个游戏工作」。此外，你需要是一个能够看清复杂的系统、分析出事物间的联系和规则，并且能在常见的互动当中找到灵感的人。你还需要「成为更好的玩家」——用你自己和你的游戏体验来训练自己对好的游戏玩法的敏锐程度（貌似不太对，但这让我不禁想到岩田聪先生的“玩家之心”）。此外，一定需要有创造力才能设计出一个很棒的游戏。\n​\t针对第三、四个问题，本章主要介绍的是「以玩法为核心的设计流程」。其流程为：\n建立玩家体验目标 制作原型和测试游戏 迭代设计流程 brainstorm 实物原型 展示（可选） 软件原型 设计文档 生产 QA (Quality Assurance) 主要内容与要点 游戏设计的核心 ​\t本章的观点是「好的核心玩法才是游戏的本质」，只有好的核心玩法才能吸引住玩家，游戏设计师的注意力应该集中在玩家体验上，不要被其他顾虑干扰。（然而现在国内许多厂商游戏本质上都是套皮游戏，糖豆人火了就出蛋仔派对、PUBG 火了就出和平精英、搜打撤火了就出三角洲、黎明杀机火了就出第五人格等等，都在害怕创新带来不确定性） 应该牢记「游戏测试是整个游戏设计过程的心脏」，在各个阶段都坚持让目标用户测试游戏，并且游戏原型的构建和迭代要很早就开始，积极测试、验证、迭代。\n游戏设计师所需的才能和技能 ​\t游戏设计师最基本的特征是「热爱游戏和玩」，然后需要能进行「清楚、高效地交流，并做一个好的听众和妥协者」，需要「保证整个团队各种类型的人都在为同一个游戏工作」，需要会并且从开发的最开始阶段就「坚持执行良好的开发流程」，需要能「用不同的视角看这个世界，在常见的互动中找到玩法灵感」，需要「训练和保持对游戏和游戏玩法的敏锐直觉」，需要有「创造力」。\nD.O.A. ​\tD.O.A.，Dead On Arrival，是指一个游戏玩起来完全没有任何乐趣，一上市就被认定失败。（比如 星鸣特攻、魔戒：咕噜 这些？）\n以玩法为核心的设计流程 建立玩家体验目标 ​\t此设计流程坚持考虑玩家体验，在每一个开发阶段都让目标用户测试游戏。“玩家体验目标”就是：玩家在有设计师创建的游戏中能够体验到的不同感受的目标。这并不是游戏里的实际内容，而是玩家可以在游戏中自行发掘的体验。\n制作原型和测试游戏 ​\t要尽早地做出游戏原型并进行游戏测试，不要在对玩家体验目标、核心游戏机制深入理解时就开始游戏制作。开始制作游戏前，设计和原型的准备时间越长，就越可能避免高昂代价的错误。\n迭代设计流程 ​\t一遍又一遍地对游戏的方方面面进行设计、测试和评估，持续提升游戏的质量，直到玩家在游戏中的体验符合预期。 在设计游戏时应该知道：\n设定玩家体验的目标 构思一个想法或系统 让一个想法或系统成型（写下来或做成一个原型） 以玩家的体验为目标，测试一个想法或系统的影响（即对游戏性进行测试或分析反馈） 如果效果表现出来与玩家的体验相违背，那么回到第一步 如果出来的效果是好的，但是没达到你的预期，阿么尝试再次修改和测试 如果新的想法最终能达到你的预期，那么迭代过程完成。 书中案例与引申 Will Wright 创造 SimAnt 和 SimEarth\n​\tWill Wright 创造 SimArt 灵感来源于观察蚂蚁群落，而进一步地，他开始观察生态系统，从盖亚假说中找到灵感，做出了 SimEarth。对这个世界有一个非常强的好奇心和热情，是 Wright 游戏灵感的重要来源。\n​\t那么，我们如何找到灵感呢？从系统的角度观测我们所热衷的事物，将其拆解为目标、行为、关系等。试着理解这个系统中的每一个元素到底是如何进行互动的，这就可以成为一个有意思的游戏的基础。\n宫本茂的游戏灵感来源\n​\t宫本茂的游戏很多都来自于他记忆中童年探险的感觉和奇遇，他说总是从他自己的童年和爱好中寻找灵感。 而想想自己的生活经历，有可能就有激发自己游戏想法的记忆，「童年可以成为一个强大的游戏设计灵感来源」，其原因也很简单，当我们是孩子的时候，我们总是会全神贯注地玩游戏。所以当你回顾童年，也许就会发现所需要的游戏素材就在那里。\n游戏《你不知道的杰克》\n​\t此游戏的设计师简单地结合了高端和低端的知识来挑战玩家，这样可以让玩家在两个领域都变得很擅长，如此创新的游戏跨过了游戏的边界，使各种人都爱玩。\n​\t这旨在说明创造力或许还是两个毫不相干的事物结合在一起的产物。\nKatamari Damacy 的作者 Keita Takahashi 的游戏灵感来源\n​\tKeita Takahashi 在分配到“想出一款竞速比赛游戏的做法”时，想要做出比竞速游戏更加独特的游戏，于是就想出了“粘球”的游戏机制，在游戏中玩家可以滚动粘球来粘起物品。\n​\t这说明创新的想法有时会主动找上门来，但是需要注意哪些想法是不合实际的。\nEric Zimmerman 和 Nathalie Pozzi 在游戏 SiSSYFiGHT 2000 中的迭代过程\n​\t主要是给一个具体的例子，体验下迭代设计法的具体应用。\n我的思考与疑问 如何区别“以玩法为核心的设计方法”和其他设计方法？什么时候正确使用？\n​\t我个人认为，还是应该根据自己的游戏的主要内容和目标群体来确定。有的游戏的主体就是故事本身，而对操作什么的并不是很重要，比如 galgame 和 底特律：变人 这样的互动叙事类/剧情游戏，这部分游戏应该考虑的是「以叙事为核心」（随手写的，非专业术语）。所以我认为，应该先确立玩家的体验目标，然后对应的运用设计方法。\n游戏设计师和游戏制作人的区别？\n​\t这里贴一个文章，我的理解就是 game designer 主要负责核心玩法、系统、内容的设计，而 game producer 负责项目的管理和推进、质量把控和预算控制。\n​\t这里附上刚才的文章的部分摘录：\nWhile designers are focused on a game’s vision and producers on the schedule and execution, being attuned to both will make you better at either job. Game development strikes a balance between the two; each needs good advocates for a game to be successful.\n当设计师专注于游戏的愿景，而制作人专注于时间表和执行时，同时对两者都有所了解将使你在任意一个职位上表现得更出色。 游戏开发在两者之间寻求平衡；为了游戏的成功，每个角色都需要优秀的倡导者。\n实物原型只在创新时需要吗？如何界定「创新」？\n​\t文章说的是「跳过实物原型阶段，你很难设计出一个原创游戏。对现有的参考游戏进行加强或改造，意味着你的游戏从一开始就注定是衍生品。」。怎么样的游戏才算得上是「原创」，怎样又才是「衍生品」？ 在此浅谈下自己的理解，我认为「实物原型是必要的」，能够在初期展示游戏玩法，有助于团队沟通和验证核心机制、减少成本。\n​\t而何为创新，我认为需要分不同方面来说，完全的「原创」几乎是不可能的，但是「创新」仍然是游戏行业生命里的来源。创新方面来说，最经典的就是「玩法创新」，是能够直接开创新的游戏类型的存在，比如「雷神之锤」之于 3D游戏 和 FPS 游戏；还有「设计创新」，比如「塞尔达传说：旷野之息」之于开放世界地图设计；还有「艺术创新」，比如「Atlus」就以独特的艺术风格闻名。除此之外应该还有其他，暂时先写这么多吧。\n练习 练习 1: 成为一名测试者 扮演一名测试者，玩游戏的时候观察自己，记录自己的行为和感受作出详细记录。然后看自己的朋友玩并重复记录。比较这两份记录并分析自己学到了什么。\n练习 2: D.O.A. (Dead On Arrival) 找一个玩过的 D.O.A. 并写下来喜欢这个游戏的哪些部分、哪些部分又是被设计师忽略的、以及这个游戏又可以如何提高？\n​\t很遗憾我几乎没有玩过 D.O.A. 的游戏，但我可以说说我了解一点🤏的游戏「魔戒：咕噜」，对我来说，这个游戏的背景故事可能会有一些吸引我，我对此游戏和开发工作室并不太了解，对「指环王」的故事也不甚了解，但毕竟顶着这么有名的 IP，又是我比较感兴趣的西幻世界，所以背景故事会是有可能吸引我的地方。\n​\t然而据我了解，游戏里的任务十分无趣且糟糕，任务的性能和操作手感也不好等等。\n​\t这么看来设计师最忽略的地方就是「玩家体验」，我甚至很怀疑在开发过程中甚至根本没有「试玩和迭代」，开发人员只是在开发「自认为可以」的游戏。这个游戏如果要提高，就需要从头来过，重视玩家体验和测试迭代。\n练习3: 把你的生活做成一个游戏 列出你生活中的五个可以作为游戏的领域，然后简要的形容每一个可能拥有的游戏结构。\n骑车上学路 初中的时候我骑自行车上下学，但是经常起晚了快迟到了在路上飙车，需要躲避路上的车辆行人还有莫名其妙的杂物，有时候还会碰到别的也在飙车的，于是双方开始竞速。晚上回家的时候走完全不同的路线，要躲避因为天黑可能看不清的路上的大坑，一旦撞上去就得爆胎。\n​\t我认为可以据此设计一个简单的赛车躲避游戏，背景就是上下学路。游戏有日夜系统，白天晚上路况不同，还有随机刷新的其他自行车手，需要在到达终点前超越。\n食堂模拟器\n​\t为什么食堂阿姨总是手抖？难道食堂真的赚不到钱？干脆模拟一下算了！你承包了一间学校食堂，你要根据预算采购食品、选择菜品，并且售价不能高于学校的规定，别忘了给员工还要发工资。你可以选择阿姨的手抖程度，价格不变的情况下减少昂贵菜品的量来控制成本，但是这可能导致学生们不开心而不来吃！找到最适合食堂的生存之道吧！\n​\t先写这么多！\n练习 4：游戏日志 开始写一个游戏日志。不要只是说游戏里有什么东西，而是要深入挖掘你在游戏中做的选择，你对这些选择的思考和感受是什么，找到提供这些选择的游戏机制。详细地写，寻找为什么游戏中存在多样的游戏机制，分析为什么游戏中存在多样的游戏机制，分析为什么游戏的某一特定时刻很好玩而不是另外一个。\n练习 5: 你的童年 列出十个你小时候玩过的游戏，简单地形容每个游戏吸引你的地方在哪里。\n抛石子\n​\t就是将石子打磨成近似正方体，然后有很多关，每一关都是不同的抛法和接法。\n​\t我认为此游戏吸引我的地方在于紧张感和突破时的成就感，所有关必须一次打通，失败一次就要交给别人，然后自己重新开始，现在看来貌似有些像「实体版 rougelike」。当成功通关的感觉真的很舒畅。\n翻纸牌\n​\t牌就是自己的「资产」，每次对局都拿出一张牌，将纸牌放在地上，看谁能将其翻起来，翻起来的人就拿走别的纸牌。\n​\t此游戏吸引我的地方就是翻起来时一次性获得其他人的牌的爽快的感觉。\n手心手背翻纸牌\n​\t貌似也不是纸牌，是用纸叠成的别的形状，具体有些忘了，暂且称之为纸牌吧。现将自己和别人出若干纸牌，然后将总的纸牌先堆叠在手心，然后将纸牌抛至空中用手背接住，再抛至空中用手握住，最后手里握住多少牌就获得多少牌。\n​\t此游戏最吸引我的地方感觉也是，当很多牌一起时如果全部抓住或者抓住很多时的成就感。\n​\t先写这么多吧。\n精选摘录 「作为一名游戏设计师，首先且同时最重要的就是和玩家站在同一阵营。」 「游戏并不是单向交流的娱乐，想要做一名出色的游戏设计师，并不是要掌控游戏的所有功能的细节，而是要为玩家创造出一种有潜力的体验——把游戏世界的内容都布置好，当玩家进入这个世界后亲自体验。」 「在本书中，游戏测试是整个游戏设计过程的心脏。」 「作为一名设计师，让游戏进化成为超越你最初想法的游戏是你的职责。不是把它紧锁在一个地方一成不变，而是孕育出新的生命，这就是游戏设计的艺术。」 「伟大的游戏设计师热爱创作可玩性高的游戏，最游戏和玩的热情是所有伟大的设计师的共同点。」 「游戏设计师通常在用不同的视角看这个世界。一部分原因是职业，另一部分原因是游戏设计的艺术需要一个能够看清复杂系统、分析出事物间的联系和规则，并且能在常见的互动中找到玩法灵感的人。」 「如果你要想出一个非常独特的想法，那么就不要从现有的游戏中找想法。取而代之的是，去看你周围的世界。」 「如果你想做一个游戏设计师，你就需要在玩游戏的时候集中注意力，通过保持敏感来体验自己的感受，并且批判性地分析游戏内部结构，就像学习其他艺术形式需要做的事情一样。」 「我们过去的经历，我们的爱好，我们的感情关系，还有我们的个人身份，在我们试图创新时全都扮演着重要角色。了不起的游戏设计师能够找到一个把它们注入创作灵魂中的方法。」 「我们要坚持在每一个开发阶段都让目标用户测试游戏。」 「你让玩家参与进来得越早，效果就越好。」 「以玩法为核心的设计中，另外一个重要内容就是要尽早地做出游戏原型并进行游戏测试。」 「我们建议，你不要在还没有对你的玩家体验目标、核心游戏机制深入理解时，就开始游戏制作。」 「对于游戏而言，迭代设计也意味着对游戏好不好玩进行测试。」 「设计第一个原型时，我们首要思考的是如何以最快的速度得到一个可执行版本，并以一种合理的方式去处理项目中的不确定因素。」 「在迭代设计过程中，不管何时你都要仔细思考在下一个版本的原型中，你应该做什么样的调整以及预期得到什么样的效果。」 「如果跳过实物原型阶段，你很难设计出一个原创游戏。对现有的参考游戏进行加强或改造，意味着你的游戏从一开始就注定是衍生品。」 「如果你看不到团队有所争执，你就不可能知道他们之间是否在充分地交流想法。」 「真正的创新很少来自灵光一现，往往更多是来自长期积累和实验。」 本章小结与感想 ​\t本章给了成为游戏设计师应该需要的技巧和工具，这是具备挑战游戏设计极限能力的基础。个人理解，总结起来技巧就是「热爱、沟通与创造」，工具就是「以玩法为核心」。而在整个开发过程中，最重要的就是「测试、原型与迭代」，先做出可玩原型，而不是拘泥于其他方面。\n","date":"2025-01-18T00:00:00Z","image":"http://localhost:1313/p/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A2%A6%E5%B7%A5%E5%8E%82%E7%AC%AC%E4%B8%80%E7%AF%87%E7%AC%AC%E4%B8%80%E7%AB%A0/cover_hu_d78e1df053c2a7d7.png","permalink":"http://localhost:1313/p/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A2%A6%E5%B7%A5%E5%8E%82%E7%AC%AC%E4%B8%80%E7%AF%87%E7%AC%AC%E4%B8%80%E7%AB%A0/","title":"游戏设计梦工厂，第一篇第一章"},{"content":"Chapter 3 The Layered Tetrad 分层四元法帮助你分析你爱的游戏，并且帮助能能够以一个总体的视角去看待你的游戏，让你不仅是了解游戏的机制，更包括他们的游玩的含义、社会属性、意义和文化的实现。\n​\t分层四元法是前面所提的三个框架的理念的拓展和组合。分层四元法并不定义什么是游戏，而是一个帮助你理解所有制作游戏需要设计的不同元素，和它们在游戏内外的意义。\n​\t分层四元法由 Schell 的四元法中的四个元素组成，但这些元素通过三个层次来体验。\n​\t前两个为内嵌层 (inscribed) 和动态层 (dynamic) ，基于 Fullerton 的形式元素 (formal elements) 和动态元素 (dynamic elements) 来划分。第三个是文化层 (culture)，涵盖了游戏的生命 (game\u0026rsquo;s life) 和游玩之外的影响，还提供了链接游戏和文化的纽带，这对我们成为有意义的艺术创作者和负责人的游戏设计师极其重要。\n​\t本章会简短描述每一层，后面章节会细讲。\nThe Inscribed Layer ​\t这层与Schell的四元法极其相似，定义也十分相似，但是它们被限制只存在于游戏未被游玩时游戏层面。\n内嵌层\nMechanics\n​\t内嵌系统 (inscribed system) 定义了玩家和游戏如何交互的。\n​\t这包括游戏的规则和 Fullerton 的形式元素：玩家交互模式、目标、资源、边界等。\nAesthetics\n​\t内嵌美学 (inscribed aesthetics) 描述了游戏看起来如何、听起来如何、闻起来如何、尝起来如何和感觉起来如何（how the game looks, sounds, smells, tastes, and feels）。实际上这和 Schell 的定义相同。\nTechnology\n​\t也和 Schell 的一样！\nNarrative\n​\tSchell 在他的四元法中用了 story 这个术语，但分层四元法采用 narrative 这个更广泛的术语来表示，与 Fullerton 的用法类似，涵盖了前提、角色和情节。内在叙事（inscribed narrative）包括所有游戏中的预设剧本故事（pre-scripted story）和预设角色（pre-generated characters）。\nThe Dynamic Layer ​\t正如 Fullerton 的书 Game Design Workshop 和 MDA 框架所描述的，动态层在游玩过程中涌现。\n内嵌层 + 动态层\n通过游玩游戏，玩家从内嵌层中生成动态层。\n​\t正如图中所示，玩家从静态的内嵌层（inscribed layer）中构建出动态层（dynamic layer）。动态层中的一切都通过游玩产生，并且动态层由玩家直接控制的元素和玩家和内嵌层元素产生的交互一同构成。动态层是涌现（emergence）的领域，即从看似简单的规则中产生复杂的行为的现象。游戏的涌现行为通常很难预测，但是你将会反复构建的一个游戏设计中的强大技能就是去预测涌现行为的能力，或者至少做出相当不错的猜测。\n动态层中的四个动态元素是：\nMechanics\n​\t内嵌机制涵盖了规则、目标等，而动态机制则是玩家如何与内嵌元素交互。\n​\t动态机制包括过程（procedure）、策略（strategies）、涌现游戏行为（emergent game behavior），最终包括游戏的结果（the outcome of the game）。\nAesthetics\n​\t动态美学涵盖了在游戏过程中为玩家生成美学元素的方式（the way that aesthetic elements are generated for the player during play）。\n​\t这包括从程序艺术（procedural art，从给的定义看不是process art而更像生成式艺术generative art，由计算机代码即时生成的数字游戏艺术或者音乐）到身体负担比如长时间反复按按钮（比如你可能听过“任天堂拇指，nintendo thumb”）。 不是？真要把physical strain算作aesthetics吗？\nTechnology\n​\t动态技术描述了游戏的技术组件在游玩时的行为。\n​\t这包括了一对骰子实际上似乎从不产生数学概率预测的平滑钟曲线的结果（意思是并不一定服从正态分布？），还涵盖了数字游戏中的计算机代码所做的几乎所有事情。这方面的一个具体例子可能是游戏中敌人的AI代码的性能，但是从更广泛的意义上说，动态技术绝对涵盖了数字游戏的代码在游戏运行时所做的一切。\nNarrative\n​\t动态叙事指代的是从游戏系统中过程性地/程序性地（procedurally）涌现的故事。这可以意味着一个玩家分支剧情叙事的路径。\nThe Culture Layer ​\t文化层描述了超越游玩之外的游戏，涵盖了游戏和文化之间的相互影响。\n​\t游戏的玩家社区产生了文化层，在这里，玩家的控制比游戏设计师更强，而设计师的社会责任在这里清晰起来。\n玩家社区和社会的碰撞产生了文化层\n​\t在文化层中四个元素之间更加模糊，但是仍值得从四个元素的角度来解读。\nMechanics\n​\t文化层机制的最简单的呈现就是游戏 mod，也涵盖了复杂如游戏的涌现游玩 (emergent play) 对社会的影响。\nAesthetics\n​\t与机制类似，文化层的美学涵盖了同人作品、游戏音乐的 remix 或者其他的美学上的粉丝行为如 cosplay。\n​\t很重要的一点是授权了的跨媒体产品不属于文化层，因为它们的控制者仍是游戏知识产权的所有者，而文化层的美学是由游戏玩家社区所控制的。\nTechnology\n​\t文化层技术涵盖了非游戏目的的游戏技术的使用和能够影响游戏体验的技术。\n​\t文化层技术还涵盖了游戏的可能性的拓展（the expansion of possibilities of what game can mean by continually expanding the possibility space of gaming）以及玩家使用 mod 修改游戏内嵌元素的技术方面。\nNarrative\n​\t文化层叙事涵盖了同人跨媒体作品的叙事方面，也包括文化和社会中关于游戏的故事，比如对 GTA 的恶评和对风之旅人或 Ico 的美谈。\nThe Responsibility of the Designer ​\t所有设计师都明白他们对游戏内嵌层的责任。很明显，游戏开发必须具有清晰的规则、有趣的美术等鼓励玩家进行游戏。\n​\t到了动态层，设计师们就更不清楚（muddier）自己的责任了。游戏设计师会惊叹于他们的游戏的涌现并且想把该行为的责任推卸给玩家，但其实设计师仍要对玩家在动态层于设计师设计的系统的影响中的体验（the experiences of players at the dynamic layer through the implications of the systems they designed）负责。事实上，游戏设计最重要的一方面就是预测并打造动态层体验。这当然是个很艰难的任务，但也正是它有趣的部分原因。\n​\t那么，设计师在文化层上的责任是什么呢？简短来说，你要对你的游戏产生的社会影响和对玩家造成的影响负责，我们有责任通过游戏促进亲社会和thoughtful的行为，并且尊重玩家以及他们花费在体验我们所创造的上的时间，而不是损坏游戏在社会上的形象，如诱骗小孩充巨资（书上就有，不是我影射某公司）。\n","date":"2024-06-03T00:00:00Z","image":"http://localhost:1313/p/reading-notes-of-introduction-to-game-design-prototyping-and-development-chapter-3/cover_hu_8a5913288cb26eb.png","permalink":"http://localhost:1313/p/reading-notes-of-introduction-to-game-design-prototyping-and-development-chapter-3/","title":"Reading Notes of Introduction to GAME DESIGN, PROTOTYPING, and DEVELOPMENT, Chapter 3"},{"content":" 长文预警！！！另外其实笔者并不咋会做笔记，基本可以看作翻译和吐槽\u0026hellip;\u0026hellip;\nChapter 1 Thinking Like a Designers ​\t本章首先以Bartok游戏为例，简单讲解如何设计并迭代一个游戏，其实应该说讲的是如何迭代一个经过基本设计的游戏。\nPlaytesting ​\t首先要做的事就是试玩上几轮， \u0026ldquo;to get a feel for it\u0026rdquo;。如果你想玩Bartok的网页版本，可以访问 https://book.prototools.net/BartokWebBuild/BartokWebBuild.html。\nAnalysis: Asking the Right Question ​\t在每次试玩之后，问自己正确的问题很重要，不同游戏自然问题不同，但一般都基于以下几个 general guidelines：\nIs the game of the appropriate difficulty for the intended audience?\n​\t对目标受众而言难度是否合适？是否会太困难或太简单，还是刚刚好？\nIs the outcome of the game based more on strategy or chance?\n​\t这个游戏的结果更吃运气还是更看重策略？随机因素作用是否会太强？或者游戏决定性太强，一名玩家领先后其他玩家根本没机会赶上？\nDoes the game have meaningful, interesting decisions?\n​\t游戏是否有有意义且有趣的决策？到你的回合时，你是否有多个选择，且在这些选择之间做决定会是有趣的事吗？\n​\t(\u0026ldquo;When it\u0026rsquo;s your turn, do you have several choices, and is the decision between those choices an interesting one?\u0026quot;）\nIs the game interesting when it\u0026rsquo;s not your turn?\n​\t你是否能影响其他玩家的回合？或者其他玩家回合能否对你产生立即影响？\n​\t我们还能问出许多其他问题，但是这几个是最常见的。\nModifying the Rules ​\t正如你会在这整本书里看到的，从过程的角度来看游戏设计十分简单，几乎就总是：\n逐渐修改规则，每次测试后只修改很小一部分 用新规则游玩测试游戏 分析新规则之下游戏的feel如何改变 设计你认为能让游戏的feel往你想要的方向进行移动的新规则 重复这个过程直到你满意 ​\t以上这个重复的过程，术语为“迭代设计（Iterative Design）”。对于Bartok的例子，你可以从以下三个规则改动当中挑一个来开始游玩测试：\nRule 1: 如果一个玩家打出了2，那么ta左边的玩家不得出牌，且必须抽取两张牌\nRule 2: 如果一个玩家的某张牌的颜色和数字都能对的上此时目标牌，那么可以无视顺序随时打出此牌并大喊 \u0026ldquo;Match Card!\u0026quot;，随后游戏从该玩家的下一位玩家继续。此规则可用来强行跳过某些玩家的回合。\nRule 3: 如果某名玩家只剩最后一张手牌，那么需要立刻宣布 \u0026ldquo;Last Card\u0026quot;，如果被其他玩家先宣布，那么需要罚抽两张牌。\nAnalysis: Comparing the Rounds ​\t在你游玩过不同规则选项的游戏之后，分析每一轮的结果，回看你的笔记去看不同的规则是如何改变游戏的感觉的。你或许能体验到即使是简单的规则改变也能够很大程度地改变游戏的感觉。书中列出了Bartok在不同规则下的场景反馈，在此简单列出来：\nThe original rules 有些无聊，没有什么有趣的选择，游戏越到后面就越经常只有一个选择。游戏很靠运气，玩家不需要很在意其他玩家的回合，也没办法影响到其他玩家。\nRule 1 增加了游戏的趣味性，允许玩家直接影响其他人。\nRule 2 对玩家注意力影响很大，因为所有玩家都有机会中断其他玩家的回合，玩家们会更加其他玩家的回合，增加了紧张刺激感，更能吸引玩家。\nRule 3 这条规则只在游戏可能快要结束时生效，不会影响游戏主进程，但仍会影响玩家在此时的行为。这条规则将引入一种有趣的紧张感，当某个玩家即将只剩一张牌时其他玩家将会想办法抢先说出\u0026quot;Last Card\u0026rdquo;（\u0026ldquo;try to jump in and say\u0026rdquo;）。这是多米诺和纸牌游戏的常见规则，当玩家正尝试清空手牌而忘记了这条规则，这就让其他玩家有机会赶上领先的玩家。\nChapter 2 Game Analysis Framework ​\t首先学一个 “fancy word”，ludology，这是给 study of games and game design 取的 “fancy name”。它的词源是 \u0026ldquo;From the Latin ludus (“game”) +‎ -ology. May also be construed as ludo +‎ -ology, although the prefix ludo- apparently derives from this word.\u0026rdquo;\nCommon Frameworks for Ludology ​\t本章将要介绍的框架如下：\nMechanics, Dynamics, and Aesthetics (MDA)\n​\t由 Robin Hunicke, Marc Lebranc 和 Robert Zubek 首次提出，MDA 分别代表 Mechanics（机制）, Dynamics（动态）和 Aesthetics（美学），最为业内设计师所熟知。\nFormal, Dramatic, and Dynamic elements (FDD)\n​\t由 Tracy Fullerton 和 Chris Swain 在 Game Design Workshop（游戏设计梦工厂）一书中提出。FDD 与电影学有着千丝万缕的联系。\nElemental tetrad（四元法）\n​\t由 Jesse Schell 在他的 The Art of Game Design（游戏设计艺术）一书中提出，将游戏分为四个核心元素：\n​\tmechanics（机制）, aesthetics（美学）, story（剧情）和 technology（技术）。\n​\t每个框架都有优缺点，他们共同促成了本书所述的 Layered Tetrad（分层四元法）。\nMDA: Mechanics, Dynamics, and Aesthetics ​\tMDA的核心元素是 mechanics, dynamics, and aesthetics 的定义、设计师和玩家看待游戏的不同视角的理解，并且提出设计师应当首先通过美学的视角来接近游戏，再回过头来处理能够产生这些美学的动态和机制。\nDefinitions of Mechanics, Dynamics, and Aesthetics ​\t需要注意的是上面提到的几个框架有一些共同的名词，但是它们的定义不尽相同，甚至会完全不同。\n​\t以下为MDA的定义：\nMechanics\n​\t游戏在数据表示和算法层次的特定组件，包括游戏规则和玩家交互的设计方面。 （第一句话中文版第一版翻译的是“游戏的数据层面上的组件和算法”，但是英文版第三版原文为 “The particular components of the game at the level of data representation and algorithms.”，原论文表述为 “Mechanics describes the particular components of the game, at the level of data representation and algorithms.”，英文版 wiki 介绍为“Mechanics are the base components of the game - its rules, every basic action the player can take in the game, the algorithms and data structures in the game engine etc.”，中文版 wiki 为“机制，指游戏的基础部分 - 规则。在游戏中玩家可执行的每个基本动作、以及游戏编程、游戏引擎中的算法算法和数据结构等等。”，故可基本认定为中文版第一版翻译错误。）\nDynamics\n​\t响应玩家输入以及其他输出的机制的运行时表现，会随着时间变化，包括所有在游戏时由于机制而发生的实际操作。 （先给大家看原文第一句“The runtime behavior of the mechanics acting on player inputs and each other’s outputs over time. ”， btw，这句话基本上和论文原文一致。中文版第一版翻译为“相应玩家输入和其他输出的实时行为”，这个翻译我认为不好，并没有体现mechanics和dynamics的联系。所以我觉得翻译的不好！）\nAesthetics\n​\t玩家在与游戏系统交互时（设计师）期望（玩家）唤起的情感响应。在MDA框架中，玩家在游玩游戏时和结束游戏后的感受都属于美学。\n在第一版中，以上三点都只有从论文中摘抄下来的部分，也就是只有第一句，故中文版第一版也只翻译了第一句。（我说这翻译怎么都只翻译一半）\n​\tMDA对美学的定义是很独特的，没有其他的框架会如此定义。美学通常指的是哲学上的一个分支，和美、丑等概念有关。而更通俗地说，设计美学（design aesthetic）是设计的一种统一意图。（讲道理，我觉得这并不“colloquially”，因为其实我并没有看懂，还是 po 出原文吧\u0026quot;And, more colloquially, a design aesthetic is the cohesive intent of a design.\u0026quot;）\nDesigner and Player Views of a Game ​\t基于 MDA，设计者应该首先从美学视角看待游戏，考虑游玩时要给玩家如何的情感体验。再回过头寻找能够产生那些情感的动态，再最终寻找能够创造这些动态的机制。而玩家倾向于以一个相反的方向看待游戏，首先体验到游戏的机制（经常是通过阅读游戏规则），然后在游玩中体验到动态，最后（希望）体验到设计师一开始预想的美学。\nDesign from Aesthetics to Dynamics to Mechanics ​\t书中以Snakes and Ladders为例（想必这个游戏的规则不用再介绍），体现了设计师是如何通过修改机制影响动态和美学的。\n​\t原始版本的游戏被设计成让孩子们感觉良好并且始终有赢的可能，玩家必须能感觉到游戏的结局不是固定的，在游戏过程中始终可以寄希望于好运气。期望的美学是让玩家体验希望、好运的逆转还有完全不做决定的刺激。实现此的机制就是蛇和梯子，而动态就是两者的交汇，产生在玩家与机制遭遇之时，带来了希望和刺激的美学感觉。\n​\t但成年人更倾向更具有挑战性的游戏，他们不希望靠运气而是使用策略来赢得游戏。因此设计师希望让游戏感觉更策略化和目的化，我们可以通过仅修改规则（机制的元素之一）来达成这样的美学改变。比如说加入以下规则：\n每个玩家控制两枚棋子 每个回合，玩家掷两枚骰子 可以两枚骰子都给一个棋子用，或者一个棋子一枚骰子 可以选择牺牲一枚骰子，然后用另一枚骰子来逆向移动对手的棋子 如果玩家的棋子行进后遇到对手的棋子，那么可将对手棋子下移一行 如果玩家的棋子行进后遇到自己的棋子，那么可选择自己的一个棋子上移一行 规则4、5让玩家之间相互协作或对抗，规则1、3让游戏减少运气的影响，都增加了游戏的策略性。 Formal, Dramatic, and Dynamic Elements ​\t当 MDA 在试图帮助设计师和评论家更好地理解和讨论游戏时，由 Tracy Fullerton 和 Chris Swain 创建的 FDD 旨在帮助 USC 的 Game Design Workshop 课程的学生更效率地设计游戏。\n​\t这个框架将游戏拆解成三类元素：\nFormal elements\n​\t将游戏从其它类型的媒体或交互区分开来的元素，提供了游戏的结构。形式元素包括规则、资源和边界等。\nDramatic elements\n​\t游戏的剧情和叙事，包括前提剧情/故事背景/背景设定（就是 premise，不知道怎么翻更确切）。戏剧元素将游戏连结在一起（tie the game together），帮助玩家理解规则，并鼓励玩家对游戏的结果产生情感投入（encourage the player to become emotionally invested in the outcome of the game）。\nDynamic elements\n​\t游戏的动态过程（the game in motion）。当玩家将规则转变为实际的游玩时，游戏就进入了动态元素阶段。动态元素包括策略、行为和游戏实体间的联系等。需要注意的是，这和 MDA 中使用的 dynamics 术语有关联但范围更广，因为它不仅仅是机制的运行时表现（，还包括比如策略、行为和游戏实体间的联系等）。\nFormal Elements ​\tGame Design Workshop提出了将游戏和其他种类媒体区分开来的七种形式元素：\nPlayer interaction pattern\n​\t玩家如何交互？\n​\t游戏是单人、一对一、队伍对抗、乱斗（多个玩家相互对抗）、一对多、合作甚至是多人对抗一个系统？\nObjective\n​\t玩家在游戏中试图得到什么？如何赢下游戏？\n​\t（What are the players trying to achieve in the game? When has someone won the game?）\nRules\n​\t规则通过告诉玩家能做什么不能做什么来限制玩家的行为。\n​\t许多规则明确写在游戏中，但有些 implicitly understood by all players（相当于默认规则/共识，比如尽管大富翁中没有明确写出不能抢银行，但玩家也明白不能。）\nProcedures\n​\t玩家在游戏中采取的行动类型。\n​\tSnakes and Ladders 中的规则告诉你投骰子并移动对应格数。这个规则所指明的过程（procedure）就是投骰子和移动棋子。过程由一系列规则的相互作用所定义（Procedures is defined by the interaction of a number of rules.）。但有一些仍在规则之外：尽管 Poker 中没有明确定义相关规则，但是虚张声势仍是游戏中一个重要的过程。\nResources\n​\t资源是游戏中有价值的各种元素。\n​\t比如金钱、生命值、物品和财产等。\nBoundaries\n​\t游戏和现实的界限在哪？（Where does the game end and reality begin?）\n​\tJohan Huizinga 在他的书 Homo Ludens 中定义了 magic circle，这是个由游戏规则取代现实规则的临时世界（defines the magic circle as a temporary world where the rules of the game apply rather than the rules of the ordinary world）。在足球和冰球等运动中，magic circle 有场地的边界定义；但在 I Love Bee 这样的另类实境游戏（Alternative Reality Game）中，边界远不那么清晰。\nOutcome\n​\t游戏如何结束？在游戏中既有最终结果也有过程性结果。\n​\t（中文版第一版翻译为”除了终点，过程也不断导向结局“，原文为 \u0026ldquo;There are both final and incremental outcomes in games\u0026rdquo;，但根据后续内容，以及作者在书的官方网站所放出的 PPT ，作者要表达的应该是有 ”final“ 和 ”incremental“ 这两种 outcome，而不是什么都导向结局）在棋类游戏中，最终结果是一个玩家赢，另一个玩家输（显然作者忘了有和棋规则的说\u0026hellip;）。在 D\u0026amp;D 这样的纸笔 RPG（\u0026ldquo;pen-and-paper RPG\u0026rdquo;, AKA \u0026ldquo;tabletop RPG\u0026rdquo;）中，过程性结果是当玩家击败一个敌人或者提升了等级，甚至死亡通常都不是最终结果，因为还有方法来复活玩家。\n​\t根据 Fullerton 的理论，对形式元素的另一种看法是，当这些元素被移除时，游戏就不复存在了。如果从游戏中移除规则、结果等，它就不再是个游戏。（再次拷打中文版翻译，中文第一版翻译为”根据 Fullerton 的理论，另一种审视形式元素的看法是，尝试移除任意一种规则，看看它是否还称得上游戏“，原文为 \u0026ldquo;According to Fullerton, another way to look at formal elements is that game ceases to exist when they are removed. If one removes the rules, outcome and so on from a game, it ceases to be a game.\u0026quot;，你就说说这翻译的什么东西？）\nDramatic Elements ​\t戏剧元素帮助玩家更好地理解规则和资源，并且给予玩家在游戏中更强的情感投入。\n​\tFullerton 提出了三种戏剧元素：\nPremise\n​\t游戏世界的基础故事（或者背景故事？\u0026ldquo;The basic story of the game world\u0026rdquo;）。\n​\t其为游戏叙事构建的基础。（The premise forms the basis around which the rest of the game\u0026rsquo;s narrative is built.）\nCharacter\n​\t角色是故事围绕的个体（Characters are the individuals around whom the story revolves.） （依旧拷打中文版翻译：“角色是故事里的人物”，很明显作者指的是玩家扮演的角色啊，某个小支线里面的小NPC 也是故事里的人物，ta 难道也是 Fullerton 说的 Character 吗？），有的像 Quake 中的无名、定义不清、沉默的第一人称主角，也有的像 Uncharted 系列的 Nathan Drake 这样深刻且多维的角色，就像电影里的主角。\n​\t与电影不同，电影导演的目标鼓励观众与电影主角产生共鸣，但是在游戏中玩家就是主角，设计师必须选择主角是作为玩家的化身（avatar）（将玩家的情感、欲望和意图传递到游戏世界，并且遵循玩家的意愿），或者是作为玩家必须扮演的角色（role）（这样，相反地，玩家表现出游戏角色的意愿）。后者是最常见的，也是对写手和开发者来说更容易实现的。\nStory\n​\t游戏的情节。\n​\t故事包含整个游戏过程的的叙事内容。前提（premise）为故事的发生搭建了舞台。\n​\t戏剧元素的一个未被以上三种元素明确提及的主要目的是：帮助玩家更好地理解规则。\n​\t比如 1943 年 Milton Bradley 在美国出版 Snakes and Ladders 时将名字改成了 Chutes and Ladders，也许就是为了让美国儿童更容易理解规则，因为 Chutes 比 Snakes 更加直观。除此之外游戏的许多版本还有一张图片，图片上面的孩子在梯子底部做好事，在梯子底部得到奖励。相反，滑梯则是孩子在顶部犯错，在底部被惩罚。如此一来，叙事便与道德标准相结合起来。\n​\t戏剧元素兼具嵌入叙事（embedded narrative），帮助玩家记忆规则（比如将蛇换成梯子）和游戏叙事向玩家传递游戏之外持续存在的意义的能力（比如用图片表示行善作恶的后果）（这里感觉我翻的怪怪的，我认为大概意思是在说游戏叙事可以超脱游戏，给玩家传递来自游戏之外/超越游戏本身的意义，英文原文为\u0026quot;the ability of the game narrative to convey meaning to the players that persists outside of the game\u0026rdquo;，中文版翻译为“传达游戏叙事超越游戏本身的能力”）\nDynamic Elements ​\t动态元素是指那些只在游戏被游玩后出现的东西（Dynamic are those that occur only when the game is being played）。\n要理解游戏中的动态元素，有以下几个要点：\nEmergence\n​\t看似简单的规则的碰撞可以导致不可预料的结果。\n​\t哪怕是简单如 Snakes and Ladders 的游戏也会带来难以预料的动态体验。如果一个玩家整局游戏都恰好碰到梯子，而另一位玩家一直碰到蛇，那么带来的体验就完全不同。简单的规则会导致复杂并且难以预料的行为，游戏设计师的一个最重要的工作就是尝试理解游戏规则的涌现影响。（One of a game designer\u0026rsquo;s most important jobs is to attempt to understand the emergent implications of the rules in a game.）\nEmergent narrative\n​\t除了MDA模型所提到的机制的动态行为之外，Fullerton的模型还指出叙事也可以是动态的，因为游戏玩法本身就能涌现出十分宽广的叙事。\n​\t游戏的天性就会将玩家置入非寻常的情境中，并且将因此引导产生有趣的故事。这是桌上 RPG 比如 D\u0026amp;D 的核心魅力，由一个玩家扮演 DM，给其他玩家创造体验的场景和交互的角色。这与 Fullerton 的戏剧元素提到的嵌入叙事（embedded narrative）不同，并且是互动体验独有的娱乐可能之一。\nPlaytesting is the only way to understand dynamics\n​\t有经验的游戏设计师相比新人设计师能对动态行为和涌现做出更准确的预测，但是没人能不试玩却能清楚的理解游戏的动态会如何运行（but no one understands exactly how the dynamics of a game will play out without playtesting them.）。\n​\t重复试玩可以揭示游戏本来应该具有的各种动态行为，并且帮助设计师理解他们的游戏可能产生的体验范围。（大概就是都会玩出怎么样的体验）\nThe Elemental Tetrad ​\tJesse Schell 在书 The Art of Game Design: A book of Lenses 中描述了四元法，提出了他认为的游戏的四个基本元素：\nMechanics\n​\t玩家和游戏交互的规则。\n​\t四元法中的机制是指将游戏和其他非互动形式媒体（如电影或书）区分开来的元素（和 FDD 的 formal elements很像）。机制包括规则、目标和其他 Fullerton 提到的形式元素。和 MDA 中提到的机制不同，Schell 用此术语来区别游戏机制和实现它们的技术。\nAesthetics\n​\t美学描述了游戏如何被五感接受：视觉、听觉、嗅觉、味觉和触觉。\n​\t美学涵盖从原声带到人物模型、包装和封面艺术。这与 MDA 的美学不同，Schell 指的是那些由游戏开发者创造出来的东西，比如游戏艺术和声音。\nTechnology\n​\t这个元素包括所有让游戏运作起来的根本技术（This element covers all the underlying technology that makes the game work.）。除了主机硬件、计算机软件等，还包括桌游中的技术元素，比如骰子的类型和数字、各种用来决定行动结局的表格等。\nStory\n​\tSchell 用这个表达 Fullerton 的全部戏剧元素，不仅仅她提到的 story。在 Schell 的定义中，剧情包含所有游戏中的叙事元素，包括前提和角色。\n​\t上图展示了四元法的四个元素如何相互关联。Schell 指出美学对玩家总是可见的（不是 MDA 的美学喔！）。游戏的技术是最不可见的，相比起来，玩家通常对游戏机制有更好的理解。Schell 的四元法并不涉及游戏的动态玩法，更多在于盒子里的（桌游）或硬盘里的游戏的静态元素。Schell 的四元法将在下一张更深入的探讨和拓展，因为它激发了分层四元法的四个元素。\nSummary ​\t每个这些用来理解游戏和交互艺术的框架都从不同的视角来解读：\nMDA 旨在展示并具体化这样一个观点：玩家和设计师从不同的方向接近游戏，并且提出设计师可以通过学习从玩家体验的角度来看待他们的游戏来更有效地进行游戏设计。\nFDD 框架将游戏设计分解成可以分别考虑和改进的特定组件。它旨在成为设计师的toolkit，是设计师能够分离并检查游戏中所有可以被改进的组件。FDD还强调了叙事在玩家体验中的重要性。\n四元法更多用游戏开发者的视角来看待游戏。它将游戏的基本元素分为通常分配给开发团队不同组的部分：游戏设计师负责机制、艺术家负责美学、写手负责故事、程序员负责技术。\n","date":"2024-04-26T00:00:00Z","image":"http://localhost:1313/p/reading-notes-of-introduction-to-game-design-prototyping-and-development-chapter-1-2/cover_hu_8a5913288cb26eb.png","permalink":"http://localhost:1313/p/reading-notes-of-introduction-to-game-design-prototyping-and-development-chapter-1-2/","title":"Reading Notes of Introduction to GAME DESIGN, PROTOTYPING, and DEVELOPMENT, Chapter 1 \u0026 2"},{"content":"C++ Basic Course Chapter 2 —— Dealing with data reference\n​\tC++ adds a new compound type to the language—the reference variable. Cpp reference says \u0026ldquo;Declares a named variable as a reference, that is, an alias to an already-existing object or function.\u0026rdquo;. Yes, you heard it right, a reference is a name that acts as an alias, or an alternative name, for a previously defined variable. Unlike the alias we walked before, in which they are type alias.\n​\tOf what use is such an alias? Is it to help people who are embarrassed by their choice of variable names? Maybe, but the main use for a reference variable is as a formal argument to a function. If you use a reference as an argument, the function works with the original data instead of with a copy. References provide a convenient alternative to pointers for processing large structures with a function.\nCreating a Reference Variable\n​\tYou might recall that C and C++ use the \u0026amp; symbol to indicate the address of a variable. C++ assigns an additional meaning to the \u0026amp; symbol and presses it into service for declaring references. For example, to make rodents an alternative name for the variable rats, you could do the following:\n1 2 int rats; int\u0026amp; rodents = rat;\t// makes rodents an alias for rats ​\tIn this context, \u0026amp; is not the address operator. Instead, it serves as part of the type identifier. Just as char * in a declaration means pointer-to-char, int \u0026amp; means reference-to int. The rats and rodents above have the same value and the same memory. The code below illustrates the truth of this claim.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \u0026lt;iostream\u0026gt; int main() { int rats = 10; int\u0026amp; rodents = rats; std::cout \u0026lt;\u0026lt; \u0026#34;rats = \u0026#34; \u0026lt;\u0026lt; rats \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;rodents = \u0026#34; \u0026lt;\u0026lt; rodents \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; std::endl; ++rodents; std::cout \u0026lt;\u0026lt; \u0026#34;After ++rodents: \u0026#34; \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;rats = \u0026#34; \u0026lt;\u0026lt; rats \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;rodents = \u0026#34; \u0026lt;\u0026lt; rodents \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;rats address = \u0026#34; \u0026lt;\u0026lt; \u0026amp;rats \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;rodents address = \u0026#34; \u0026lt;\u0026lt; \u0026amp;rodents \u0026lt;\u0026lt; std::endl; return 0; } ​\tNote that the \u0026amp; operator in the declaration statement is not the address operator but declares that rodents is of type int \u0026amp; (that is, it is a reference to an int variable). As you can see, both rats and rodents have the same value and the same address. (The address values and display format vary from system to system.) Incrementing rodents by one affects both variables. More precisely, the rodents++ operation increments a single variable for which there are two names.\n​\tReferences tend to be a bit confusing at first to C veterans coming to C++ because they are tantalizingly reminiscent of pointers, yet somehow different. For example, you can create both a reference and a pointer to refer to rats:\n1 2 3 int rats; int\u0026amp; rodents = rats; int* prats = \u0026amp;rats; ​\tThen you could use the expressions rodents and *prats interchangeably with rats and use the expressions \u0026amp;rodents and prats interchangeably with \u0026amp;rats. From this standpoint, a reference looks a lot like a pointer in disguised notation in which the * dereferencing operator is understood implicitly. And, in fact, that’s more or less what a reference is. But there are differences besides those of notation. For one, it is necessary to initialize the reference when you declare it; you can’t declare the reference and then assign it a value later the way you can with a pointer:\n1 2 int rats; int\u0026amp; rodents; // error: \u0026#39;rodents\u0026#39; declared as reference but not initialized ​\tA reference is rather like a const pointer; you have to initialize it when you create it, and when a reference pledges its allegiance to a particular variable, it sticks to its pledge.\n1 int\u0026amp; rodents = rats; ​\tThat is, in essence,a disguised notation for something like this:\n1 int* const prats = \u0026amp;rats; ​\tHere, the reference rodents plays the same role as the expression *prats.\nReferences as Function Parameters\n​\tMost often, references are used as function parameters, making a variable name in a function an alias for a variable in the calling program. This method of passing arguments is called passing by reference. Passing by reference allows a called function to access variables in the calling function. C++’s addition of the feature is a break from C, which only passes by value. Passing by value, recall results in the called function working with copies of values from the calling program.\n​\tLooking back at the functions we initially provided, you should now have a basic understanding, but there are two points to add:\nThe compiler cannot distinguish between versions of overloaded functions with parameters as regular variables and parameters as references of the same type.\nWhen using a reference as a return value for a function, you must adhere to the following rules:\nYou cannot return a reference to a local variable. The main reason is that local variables are destroyed after the function returns, making the returned reference a \u0026ldquo;dangling reference,\u0026rdquo; similar to a wild pointer, causing the program to enter an undefined state. You cannot return a reference to memory allocated by new inside the function. While there is no issue of local variables being destructed, in this case, you face other awkward situations. For example, if the reference returned by the function only appears as a temporary variable and is not assigned to an actual variable, then the space it points to (allocated by new) cannot be released, resulting in a memory leak. You can return a reference to a class member, but it\u0026rsquo;s preferable to make it const to avoid accidentally modifying the class\u0026rsquo;s members. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026lt;iostream\u0026gt; int\u0026amp; foo(int a) {return a;} int main() { int a = 1; int b = foo(a); std::cout \u0026lt;\u0026lt; b; return 0; } --------------------------------------------------- warning: reference to local variable \u0026#39;a\u0026#39; returned [-Wreturn-local-addr] int\u0026amp; foo(int a) {return a;} ~~~~^ ​\tRegarding references, there are also more specialized topics like rvalue references, which we won\u0026rsquo;t delve into here. If you\u0026rsquo;re interested, you can explore this concept on your own.\nenum\n​\tThe C++ enum facility provides an alternative to const for creating symbolic constants. It also lets you define new types but in a fairly restricted fashion.\n1 enum Color {RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET}; ​\tThis statement does two things:\nIt makes Color the name of a new type; Color is termed an enumeration.\nIt establishes red, orange, yellow, and so on, as symbolic constants for the integer values 0–7. These constants are called enumerators.\nBy default, enumerators are assigned integer values starting with 0 for the first enumerator, 1 for the second enumerator, and so forth. You can override the default by explicitly assigning integer values. We\u0026rsquo;ll talk about that later.\nYou can use an enumeration name to declare a variable of the enumeration type:\n1 Color cc; // cc a variable of type spectrum ​\tAn enumeration variable has some special properties, which we’ll examine now. The only valid values that you can assign to an enumeration variable without a type cast are the enumerator values used in defining the type. Thus, we have the following:\n1 2 cc = blue; // valid, blue is an enumerator cc = 2000; // invalid, 2000 not an enumerator ​\tThus,a spectrum variable is limited to just eight possible values. Some compilers issue a compiler error if you attempt to assign an invalid value, whereas others issue a warning. For maximum portability, you should regard assigning a non-enum value to an enum variable as an error.\n​\tOnly the assignment operator is defined for enumerations. In particular, arithmetic operations are not defined:\n1 2 3 cc = orange; // valid ++cc; // not valid cc = orange + red; // not valid, but a little tricky ​\tEnumerators are of integer type and can be promoted to type int, but int types are not converted automatically to the enumeration type:\n1 2 3 int color = blue; // valid, spectrum type promoted to int cc = 3; // invalid, int not converted to spectrum color = 3 + red;\t// valid, red converted to int ​\tYou can assign an int value to an enum, provided that the value is valid and that you use an explicit type cast:\n1 cc = spectrum(3); // typecast 3 to type spectrum ​\tWhat if you try to type cast an inappropriate value? The result is undefined, meaning that the attempt won’t be flagged as an error but that you can’t rely on the value of the result:\n1 cc = spectrum(40003); // undefined ​\tAs you can see, the rules governing enumerations are fairly restrictive. In practice, enumerations are used more often as a way of defining related symbolic constants than as a means of defining new types.\n​\tFor example, you might use an enumeration to define symbolic constants for a switch statement. (See Chapter 6, “Branching Statements and Logical Operators,” for an example.) If you plan to use just the constants and not create variables of the enumeration type, you can omit an enumeration type name, as in this example:\n1 enum {RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET}; Setting Enumerator Values\n​\tYou can set enumerator values explicitly by using the assignment operator:\n1 enum bits{one = 1, two = 2, four = 4, eight = 8}; ​\tThe assigned values must be integers.You also can define just some of the enumerators explicitly:\n1 enum bigstep{first, second = 100, third}; ​\tIn this case, first is 0 by default. Subsequent uninitialized enumerators are larger by one than their predecessors. So, third would have the value 101.\n​\tFinally, you can create more than one enumerator with the same value:\n1 enum {zero, null = 0, one, numero_uno = 1}; ​\tHere, both zero and null are 0,and both one and numero_uno are 1. In earlier versions of C++, you could assign only int values (or values that promote to int) to enumerators, but that restriction has been removed so that you can use type long or even long long values.\nValue Ranges for Enumerations\n​\tOriginally, the only valid values for an enumeration were those named in the declaration. However, C++ has expanded the list of valid values that can be assigned to an enumeration variable through the use of a type cast. Each enumeration has a range,and you can assign any integer value in the range, even if it’s not an enumerator value, by using a type cast to an enumeration variable.\n​\tFor example, suppose that bits and myflag are defined this way:\n1 2 3 enum bits{one = 1, two = 2, four = 4, eight = 8}; bits myflag; ​\tIn this case, the following is valid:\n1 myflag = bits(6); // valid, because 6 is in bits range ​\tHere 6 is not one of the enumerations, but it lies in the range the enumerations define.\n​\tThe range is defined as follows. First, to find the upper limit, you take the largest enumerator value. Then you find the smallest power of two greater than this largest value and subtract one; the result is the upper end of the range.\nunion\n​\tA union is a data format that can hold different data types but only one type at a time. That is, whereas a structure can hold, say, an int and a long and a double, a union can hold an int or a long or a double. For example, consider the following declaration:\n1 2 3 4 5 6 union one4all { int int_val; long long_val; double double_val; }; ​\tYou can use a one4all variable to hold an int, a long, or a double, just as long as you do so at different times:\n1 2 3 4 5 one4all pail; pail.int_val = 15; // store an int cout \u0026lt;\u0026lt; pail.int_val; pail.double_val = 1.38; // store a double, int value is lost cout \u0026lt;\u0026lt; pail.double_val; ​\tThus, pail can serve as an int variable on one occasion and as a double variable at another time. The member name identifies the capacity in which the variable is acting. Because a union holds only one value at a time, it has to have space enough to hold its largest member. Hence, the size of the union is the size of its largest member.\n​\tOne use for a union is to save space when a data item can use two or more formats but never simultaneously.\n​\tUnions often (but not exclusively) are used to save memory space. That may not seem that necessary in these days of gigabytes of RAM and terabytes of storage, but not all C++ programs are written for such systems. C++ also is used for embedded systems, such as the processors used to control a toaster oven, an MP3 player, or a Mars rover. In these applications space may be at a premium. Also, unions often are used when working with operating systems or hardware data structures.\n","date":"2023-10-27T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%AC%AC%E4%B8%89%E8%8A%82/","title":"实验室 C++ 基础课程 · 第二章第三节"},{"content":"C++ Basic Course Chapter 2 —— Dealing with data pointer\n​\tToday we\u0026rsquo;ll deals with the basic language mechanisms for referring to memory. Obviously, we can refer to object by name, but in C++ (most) objects “have identity.” That is, they reside at a specific address in memory, and an object can be accessed if you know its address and its type. The language constructs for holding and using addresses are pointers and references.\n​\tPointers, which are variables that store addresses of values rather than the values themselves. But before discussing pointers, let’s talk about how to explicitly find addresses for ordinary variables. You just apply the address operator, represented by \u0026amp;, to a variable to get its location; the name of the pointer represents the location. Applying the * operator, called the indirect value or the dereferencing operator, yields the value at the location. (Yes, this is the same * symbol used for multiplication; C++ uses the context to determine whether you mean multiplication or dereferencing.)\n​\tAs you can see, the int variable updates and the pointer variable p_updates are just two sides of the same coin. The updates variable represents the value as primary and uses the \u0026amp; operator to get the address, whereas the p_updates variable represents the address as primary and uses the * operator to get the value.\n​\tBecause p_updates points to updates, *p_updates and updates are completely equivalent. You can use *p_updates exactly as you would use a type int variable. As the program below shows, you can even assign values to *p_updates. Doing so changes the value of the pointed-to value, updates.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \u0026lt;iostream\u0026gt; int main() { int update = 6; int* p_update; // or int * p_update or int *p_update p_update = \u0026amp;update; // Express values in two ways std::cout \u0026lt;\u0026lt; \u0026#34;Values: update = \u0026#34; \u0026lt;\u0026lt; update \u0026lt;\u0026lt; \u0026#34;, *p_update = \u0026#34; \u0026lt;\u0026lt; *p_update \u0026lt;\u0026lt; std::endl; // Express address in two ways std::cout \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;Address: \u0026amp;update = \u0026#34; \u0026lt;\u0026lt; \u0026amp;update \u0026lt;\u0026lt; \u0026#34;, p_update = \u0026#34; \u0026lt;\u0026lt; p_update \u0026lt;\u0026lt; std::endl; // Use pointer to change value *p_update = *p_update + 1; std::cout \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;Now update = \u0026#34; \u0026lt;\u0026lt; update \u0026lt;\u0026lt; std::endl; return 0; } Declaring and Initializing Pointers\n​\tLet’s examine the process of declaring pointers. A computer needs to keep track of the type of value to which a pointer refers. For example, the address of a char typically looks the same as the address of a double, but char and double use different numbers of bytes and different internal formats for storing values. Therefore,a pointer declaration must specify what type of data to which the pointer points.\n​\tFor example, the preceding example has this declaration:\n1 int * p_update; ​\tThis states that the combination * p_updates is type int. Because you use the * operator by applying it to a pointer, the p_updates variable itself must be a pointer. We say that p_updates points to type int. We also say that the type for p_updates is pointer-to-int or, more concisely, int *.To repeat: p_updates is a pointer (an address),and *p_updates is an int and not a pointer.\n​\tIncidentally, the use of spaces around the * operator are optional.\n1 2 3 4 5 6 7 8 9 10 11 int *ptr; // C programmers have used this form, // accentuates the idea that the combination *ptr is a type int value. int* ptr;\t// C++ programmers, on the other hand, use this form, // This emphasizes the idea that int* is a type, pointer-to-int. int*ptr;\t// You could even do this int* p1, p2;\t// Be aware, this declaration creates // one pointer (p1) and one ordinary int (p2) // You need an * for each pointer variable name. pointer danger\n​\tDanger awaits those who incautiously use pointers. One extremely important point is that when you create a pointer in C++, the computer allocates memory to hold an address, but it does not allocate memory to hold the data to which the address points. Creating space for the data involves a separate step. Omitting that step,as in the following, is an invitation to disaster:\n1 2 long * fellow;\t// create pointer to double *fellow = 223323;\t// where is the value stores? .. Who knows? ​\tSure, fellow is a pointer. But where does it point? The code failed to assign an address to fellow. So where is the value 223323 placed? We can’t say. Because fellow wasn’t initialized, it could have any value. Whatever that value is, the program interprets it as the address at which to store 223323. If fellow happens to have the value 1200, then the computer attempts to place the data at address 1200, even if that happens to be an address in the middle of your program code. Chances are that wherever fellow points, that is not where you want to put the number 223323. This kind of error can produce some of the most insidious and hard -to-trace bugs.\n​\tHence remember that Always initialize a pointer to a definite and appropriate address before you apply the dereferencing operator () to it.*\nPointers, Arrays, and Pointer Arithmetic\n​\tThe near equivalence of pointers and array names stems from pointer arithmetic and how C++ handles arrays internally. First, let’s check out the arithmetic. Adding one to an integer variable increases its value by one, but adding one to a pointer variable increases its value by the number of bytes of the type to which it points. Adding one to a pointer to double adds 8 to the numeric value on systems with 8-byte double, whereas adding one to a pointer-to-short adds two to the pointer value if short is 2 bytes. The code below demonstrates this amazing point. It also shows a second important point: C++ interprets the array name as an address.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \u0026lt;iostream\u0026gt; int main() { double wages[3] = {10000.0, 20000.0, 30000.0}; short stacks[3] = {3, 2, 1}; // Here are two ways to get the address of an array double * pw = wages; // name of an array = address short * ps = \u0026amp;stacks[0]; // or use address operator // with array element std::cout \u0026lt;\u0026lt; \u0026#34;pw = \u0026#34; \u0026lt;\u0026lt; pw \u0026lt;\u0026lt; \u0026#34;, *pw = \u0026#34; \u0026lt;\u0026lt; *pw \u0026lt;\u0026lt; std::endl; pw = pw + 1; std::cout \u0026lt;\u0026lt; \u0026#34;add 1 to the pw pointer:\\n\u0026#34; \u0026lt;\u0026lt; \u0026#34;pw = \u0026#34; \u0026lt;\u0026lt; pw \u0026lt;\u0026lt; \u0026#34;, *pw = \u0026#34; \u0026lt;\u0026lt; *pw \u0026lt;\u0026lt; \u0026#34;\\n\\n\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;ps = \u0026#34; \u0026lt;\u0026lt; ps \u0026lt;\u0026lt; \u0026#34;, *ps = \u0026#34; \u0026lt;\u0026lt; *ps \u0026lt;\u0026lt; std::endl; ps = ps + 1; std::cout \u0026lt;\u0026lt; \u0026#34;add 1 to the ps pointer:\\n\u0026#34; \u0026lt;\u0026lt; \u0026#34;ps = \u0026#34; \u0026lt;\u0026lt; ps \u0026lt;\u0026lt; \u0026#34;, *ps = \u0026#34; \u0026lt;\u0026lt; *ps \u0026lt;\u0026lt; \u0026#34;\\n\\n\u0026#34;; std::cout \u0026lt;\u0026lt; \u0026#34;access two elements with array notation\\n\u0026#34; \u0026lt;\u0026lt; \u0026#34;stacks[0] = \u0026#34; \u0026lt;\u0026lt; stacks[0] \u0026lt;\u0026lt; \u0026#34;, stacks[1] = \u0026#34; \u0026lt;\u0026lt; stacks[1] \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;access two elements with pointer notation\\n\u0026#34; \u0026lt;\u0026lt; \u0026#34;*stacks = \u0026#34; \u0026lt;\u0026lt; *stacks \u0026lt;\u0026lt; \u0026#34;, *(stacks + 1) = \u0026#34; \u0026lt;\u0026lt; *(stacks + 1) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; sizeof(wages) \u0026lt;\u0026lt; \u0026#34; = size of wages array\\n\u0026#34; \u0026lt;\u0026lt; sizeof(pw) \u0026lt;\u0026lt; \u0026#34; = size of pw pointer\\n\u0026#34;; return 0; } ​\tIn most contexts, C++ interprets the name of an array as the address of its first element. But remember that the name of an array is not a pointer! It do always interprets to pointer, but it not!\n1 2 3 int arr[] = {1, 2, 3}; using T1 = delctype(arr); using T2 = delctype(+arr); ​\tYou can use it like a pointer, like we said before\n1 arr == \u0026amp;arr[0] == the address of first element in array ​\tSo what is \u0026amp;arr means? In value, its equals to a and \u0026amp;a[0], but in meaning, it stands for the whole array.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 int arr[] = {1, 2, 3}; std::cout \u0026lt;\u0026lt; \u0026#34;arr: \u0026#34; \u0026lt;\u0026lt; arr\t\u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;\u0026amp;arr[0]: \u0026#34; \u0026lt;\u0026lt; \u0026amp;arr[0] \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;\u0026amp;arr: \u0026#34; \u0026lt;\u0026lt; \u0026amp;arr \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;arr + 1: \u0026#34; \u0026lt;\u0026lt; arr + 1 \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;\u0026amp;arr[0] + 1: \u0026#34; \u0026lt;\u0026lt; \u0026amp;arr[0] + 1 \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; \u0026#34;\u0026amp;arr + 1: \u0026#34; \u0026lt;\u0026lt; \u0026amp;arr + 1 \u0026lt;\u0026lt; std::endl; ...................................OUTPUT.................................... arr: 0x61fe14 \u0026amp;arr[0]: 0x61fe14 \u0026amp;arr: 0x61fe14 arr + 1: 0x61fe18 \u0026amp;arr[0] + 1: 0x61fe18 \u0026amp;arr + 1: 0x61fe20 ​\tIn general, wherever you use array notation, C++ makes the following conversion:\n1 arrayname[i] becomes *(arrayname + i) ​\tAnd if you use a pointer instead of an array name, C++ makes the same conversion:\n1 pointername[i] becomes *(pointername + i) ​\tThus, in many respects you can use pointer names and array names in the same way. You can use the array brackets notation with either. You can apply the dereferencing operator (*) to either. In most expressions, each represents an address. One difference is that you can change the value of a pointer, whereas an array name is a constant:\n1 2 pointername = pointername + 1;\t// valid arrayname = arrayname + 1;\t// not allowed ​\tA second difference is that applying the sizeof operator to an array name yields the size of the array, but applying sizeof to a pointer yields the size of the pointer, even if the pointer points to the array.\nAllocating Memory with new\n​\tIt can be advantageous to create arrays during runtime rather than at compile time. You can use the new operator to allocate a piece of memory to a pointer. The new operator is used to dynamically allocate memory on the heap and returns the allocated memory address. You can use this pointer to access and manipulate dynamically allocated memory.\n1 2 3 4 5 int* ptr1; int* ptr2 = new int; *ptr1 = 3; // dangerous *ptr2 = 3; ​\tBut this only allocates memory for a single element to the pointer, but how can the pointer achieve the same function as an array and store a large number of elements? The new operator is also used, but the syntax is different\n1 int* ptr = new int[5]; // similar to int arr[5]; ​\tIt is very important to note that the memory space dynamically allocated by the program from the operating system should be released after use and returned to the operating system so that the operating system can allocate this memory space to other programs. C++ provides the delete operator to release dynamically allocated memory space.\n1 2 3 4 5 int* ptr1 = new int; int* ptr2 = new int[5]; delete ptr1; delete [] ptr2; ​\tIn C++, once you use the delete operator to release memory pointed to by a pointer, the pointer still exists, but the memory it points to no longer belongs to your program. This is called a dangling pointer. Trying to use a dangling pointer can lead to undefined behavior because the memory has been deallocated and may be used by other programs, or due to memory management reasons, it can result in crashes or unpredictable outcomes.\n​\tTherefore, in most cases, after using delete, you should set the pointer to nullptr to avoid accidentally referencing a dangling pointer. This can help you prevent dangling pointer issues. For example:\n1 2 3 4 int* myPointer = new int; // Perform some operations with myPointer delete myPointer; myPointer = nullptr; // Set the pointer to nullptr ​\tBy doing this, if you attempt to use myPointer afterward, it will be a null pointer rather than pointing to deallocated memory as a dangling pointer.\n​\tBut\u0026hellip; What is nullptr?\nNULL \u0026amp;\u0026amp; nullptr\nA null pointer has several important uses and reasons in programming:\nInitialization: When you create a pointer variable but don\u0026rsquo;t have a valid target to allocate memory to, a null pointer is a suitable initial value. It allows you to specify a valid memory address later. Representing Absence: A null pointer can be used to indicate that a pointer doesn\u0026rsquo;t point to anything, i.e., no memory has been allocated. This is meaningful in many situations, such as in data structures to represent a node without child nodes. Error Handling: In some cases, if memory allocation fails or a pointer references invalid memory, you can use a null pointer to represent an error state and take appropriate actions. Function Return Values: In certain situations, a function may need to return a pointer, but due to some reason, cannot allocate valid memory. In such cases, the function can return a null pointer to indicate failure or a specific condition. ​\tIn summary, a null pointer is a useful tool in programming for representing the absence or invalidity of a pointer. It can help you deal with various scenarios, from memory allocation to error handling.\n​\tHowever, it\u0026rsquo;s essential to use null pointers safely to avoid issues like dangling pointers and segmentation faults.\n​\tWhen it comes to NULL and nullptr in C++, it\u0026rsquo;s important to understand their background and purposes.\nNULL:\nNULL is a macro, typically defined as 0. In earlier versions of C and C++, it was used to indicate that a pointer doesn\u0026rsquo;t point to any valid memory address. However, NULL has some issues because 0 can also be used to represent integers or floating-point numbers, leading to potential ambiguities. It may also trigger certain compiler warnings or errors. In more recent C++ standards, it is recommended to avoid using NULL and use nullptr instead. nullptr:\nnullptr is a keyword introduced in C++11 specifically for representing a null pointer. It is type-safe. nullptr will not be interpreted as an integer or other data types; it can only be assigned to pointer types, helping catch some errors at compile time. The type of nullptr is nullptr_t, and it can be implicitly converted to any pointer type. Now, let\u0026rsquo;s elaborate on the differences between them:\nType Safety:\nNULL is a macro with no specific type; it\u0026rsquo;s just 0. nullptr is a keyword with a specific type, nullptr_t, making it stronger in terms of type safety. It can only be assigned to pointer types. Compile-Time Checks:\nnullptr can help catch certain type mismatches at compile time. NULL cannot offer the same level of safety because it\u0026rsquo;s just an integer and can be confused with other integer types. Recommended Usage:\nIn newer C++ standards, it\u0026rsquo;s recommended to use nullptr over NULL because of its improved type safety and ability to prevent some common errors. ​\tIn summary, for writing safer and clearer C++ code, it\u0026rsquo;s advisable to use nullptr to represent null pointers and avoid using NULL. nullptr provides better type safety and compile-time checks.\n**void ***\n​\tvoid* is a special pointer type in C++, often referred to as a \u0026ldquo;void pointer\u0026rdquo; or \u0026ldquo;generic pointer.\u0026rdquo; Its primary characteristic is that it can point to memory of any data type, as it doesn\u0026rsquo;t have a specified type. Here\u0026rsquo;s a detailed explanation of void*:\nVersatility: void* can point to memory of any data type. This makes it highly flexible and suitable for handling pointers to various data types.\nType Safety: void* lacks type information, so the compiler doesn\u0026rsquo;t perform type checking. This means you need to use void* with caution because it won\u0026rsquo;t tell you the actual data type the pointer points to.\nUse Cases:\nDynamic Memory Allocation: When using dynamic memory allocation functions like malloc() or new, they typically return void* because they don\u0026rsquo;t know the data type to be allocated. Callback Functions: When writing generic callback functions that need to accept pointers to different data types, void* can be helpful. Data Passing: In some situations, you might need to pass pointers to data where the data type is determined at runtime; void* can be used for passing such pointers. Usage Considerations:\nWhen using void*, you need to be very careful to keep track of the actual data type the pointer points to in order to avoid type mismatch errors when accessing the data. When casting void* back to the original pointer type, you\u0026rsquo;ll need to perform explicit type conversions. This may involve using operations like static_cast or reinterpret_cast. Example:\n1 2 3 4 int myValue = 42; void* ptr = \u0026amp;myValue; // Using void* to point to an int int* intPtr = static_cast\u0026lt;int*\u0026gt;(ptr); // Reverting to an int pointer std::cout \u0026lt;\u0026lt; *intPtr; // Outputs 42 ​\tIn summary, void* is a useful tool, but it requires careful handling as it sacrifices type safety. It\u0026rsquo;s commonly used for dealing with pointers to unknown data types or for passing pointers in certain situations, but it needs to be managed and type-cast with caution.\nreference\nWe’ll leave it to tommorow.\n","date":"2023-10-26T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%AC%AC%E4%BA%8C%E8%8A%82/","title":"实验室 C++ 基础课程 · 第二章第二节"},{"content":"C++ Basic Course Chapter 2 —— Dealing with data type alias\nusing the typedef keyword:\n1 2 typedef int Integer; Integer doorNumber = 211; using the using keyword:\n1 2 WHAT ARE YOU EXPECTING WE JUST LEARNED NOT LONG AGO BTW, using is the superset of typedef, we recommend you to use using using the decltype keyword:\nThe decltype keyword allows you to obtain the type of a variable or expression and use it as a type alias.\n1 2 3 int x = 211; decltype(x) y = 985; decltype(x + y) res; WARNING AGAIN\nWhat the #define directive does is simply replace the text.\nconst \u0026amp;\u0026amp; constexpr\nconst\n​\tNow let’s return to the topic of symbolic names for constants. A symbolic name can suggest what the constant represents. Also if the program uses the constant in several places and you need to change the value, you can just change the single symbol definition. Suppose, for example, that you want a symbolic constant for the number of months in a year. Just enter this line in a program:\n1 const int Months = 12; // Months is symbolic constant for 12 ​\tNow you can use Months in a program instead of 12. (A bare 12 in a program might represent the number of inches in a foot or the number of donuts in a dozen, but the name Months tells you what the value 12 represents.) After you initialize a constant such as Months, its value is set.The compiler does not let you subsequently change the value Months. If you try to, for example, g++ gives an error message that the program used an assignment of a read-only variable.The keyword const is termed a qualifier because it qualifies the meaning of a declaration.\nconstexpr\n​\t`constexpr` variables are constants computed at compile-time. They must be initialized at declaration and can only contain values known at compile-time. ```cpp constexpr int y = 2 + 3; // Calculate y's value at compile-time ``` ​\t`constexpr` functions are executed at compile-time. Their parameters and return values must be of `constexpr` types, and their bodies can only contain operations known at compile-time. ```c++ constexpr int add(int a, int b) { // A compile-time addition function return a + b; } ``` the auto keyword\n​\tC++11 introduces a facility that allows the compiler to deduce a type from the type of an initialization value. For this purpose it redefines the meaning of auto, a keyword dating back to C, but one hardly ever used. (We'll discuss the previous meaning of auto later, or not.) Just use auto instead of the type name in an initializing declaration, and the compiler assigns the variable the same type as that of the initializer: 1 2 3 auto n = 100;\t// n is int auto x = 1.5;\t// x is double auto y = 1.3e12L;\t// y is long double ​\tHowever, this automatic type deduction isn’t really intended for such simple cases. Indeed, you might even go astray. Only use when the type is obvious or when the type is annoyingly verbose to write out.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;map\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;vector\u0026gt; int main() { std::map\u0026lt;std::string, std::vector\u0026lt;std::pair\u0026lt;int, std::unordered_map\u0026lt;char, double\u0026gt; \u0026gt; \u0026gt; complexType; // What does this do? We\u0026#39;ll find out in the iterators lecture! std::map\u0026lt;std::string, std::vector\u0026lt;std::pair\u0026lt;int, std::unordered_map\u0026lt;char, double\u0026gt; \u0026gt; \u0026gt;::iterator it = complexType.begin(); // vs auto it = complexType.begin(); return 0; } lvalue \u0026amp;\u0026amp; rvalue\n​\tTo help you understand better, here is a simple and crude definition of lvalue and rvalue: lvalue is a value that can appear on the left side of the assignment operator, and of course it can also appear on the right side; and rvalue, is a value that is not lvalue.\n​\tBut you still need to understand a little more deeply. lvalues are generally addressable objects, while rvalues represent temporary or non-addressable values. It may be counter-intuitive: string literals are lvalues. This is because in C++, the string constant pool mechanism was introduced. This special area of the string constant pool is located in the data segment (Data Segment) of the program. When writing a program, we can declare a string constant using const char* or string. During the running of the program, these strings are saved in the data segment. As long as the contents of the two strings are the same, they will be saved at the same address.\n​\tSince the string constant pool in C++ is read-only, we cannot modify the strings in it. If modification is attempted, the program will throw an exception. Therefore, when we need to modify a string, we need to use other methods to modify it, such as using a char array.\nAccording to cpp reference，The following expressions are lvalue expressions：\nthe name of a variable, a function, a template parameter object (since C++20), or a data member, regardless of type, such as std::cin or std::endl. Even if the variable\u0026rsquo;s type is rvalue reference, the expression consisting of its name is an lvalue expression (but see Move-eligible expressions); a function call or an overloaded operator expression, whose return type is lvalue reference, such as std::getline(std::cin, str), std::cout \u0026laquo; 1, str1 = str2, or ++it; a = b, a += b, a %= b, and all other built-in assignment and compound assignment expressions; ++a and \u0026ndash;a, the built-in pre-increment and pre-decrement expressions; *p, the built-in indirection expression; a[n] and p[n], the built-in subscript expressions, where one operand in a[n] is an array lvalue (since C++11); a.m, the member of object expression, except where m is a member enumerator or a non-static member function, or where a is an rvalue and m is a non-static data member of object type; p-\u0026gt;m, the built-in member of pointer expression, except where m is a member enumerator or a non-static member function; a.*mp, the pointer to member of object expression, where a is an lvalue and mp is a pointer to data member; p-\u0026gt;*mp, the built-in pointer to member of pointer expression, where mp is a pointer to data member; a, b, the built-in comma expression, where b is an lvalue; a ? b : c, the ternary conditional expression for certain b and c (e.g., when both are lvalues of the same type, but see definition for detail); a string literal, such as \u0026ldquo;Hello, world!\u0026rdquo;; a cast expression to lvalue reference type, such as static_cast\u0026lt;int\u0026amp;\u0026gt;(x) or static_cast\u0026lt;void(\u0026amp;)(int)\u0026gt;(x); a non-type template parameter of an lvalue reference type; a function call or an overloaded operator expression, whose return type is rvalue reference to function;(Since C++ 11) a cast expression to rvalue reference to function type, such as static_cast\u0026lt;void(\u0026amp;\u0026amp;)(int)\u0026gt;(x). (Since C++11) Properties:\nSame as glvalue (below). Address of an lvalue may be taken by built-in address-of operator: \u0026amp;++i[1] and \u0026amp;std::endl are valid expressions. A modifiable lvalue may be used as the left-hand operand of the built-in assignment and compound assignment operators. An lvalue may be used to initialize an lvalue reference; this associates a new name with the object identified by the expression. rvalue An rvalue expression is either prvalue or xvalue.\nThe following expressions are prvalue expressions:\na literal (except for string literal), such as 42, true or nullptr; a function call or an overloaded operator expression, whose return type is non-reference, such as str.substr(1, 2), str1 + str2, or it++; a++ and a\u0026ndash;, the built-in post-increment and post-decrement expressions; a + b, a % b, a \u0026amp; b, a \u0026laquo; b, and all other built-in arithmetic expressions; a \u0026amp;\u0026amp; b, a || b, !a, the built-in logical expressions; a \u0026lt; b, a == b, a \u0026gt;= b, and all other built-in comparison expressions; \u0026amp;a, the built-in address-of expression; a.m, the member of object expression, where m is a member enumerator or a non-static member function[2]; p-\u0026gt;m, the built-in member of pointer expression, where m is a member enumerator or a non-static member function[2]; a.*mp, the pointer to member of object expression, where mp is a pointer to member function[2]; p-\u0026gt;*mp, the built-in pointer to member of pointer expression, where mp is a pointer to member function[2]; a, b, the built-in comma expression, where b is an prvalue; a ? b : c, the ternary conditional expression for certain b and c (see definition for detail); a cast expression to non-reference type, such as static_cast(x), std::string{}, or (int)42; the this pointer; an enumerator; a non-type template parameter of a scalar type; a lambda expression, such as [](int x){ return x * x; }; (since C++11) a requires-expression, such as requires (T i) { typename T::type; };a specialization of a concept, such as std::equality_comparable. (since C++20) The following expressions are xvalue expressions:\na.m, the member of object expression, where a is an rvalue and m is a non-static data member of an object type; a.*mp, the pointer to member of object expression, where a is an rvalue and mp is a pointer to data member; a, b, the built-in comma expression, where b is an xvalue; a ? b : c, the ternary conditional expression for certain b and c (see definition for detail); a function call or an overloaded operator expression, whose return type is rvalue reference to object, such as std::move(x);a[n], the built-in subscript expression, where one operand is an array rvalue;a cast expression to rvalue reference to object type, such as static_cast\u0026lt;char\u0026amp;\u0026amp;\u0026gt;(x); (since C++11) any expression that designates a temporary object, after temporary materialization; (since C++17) a move-eligible expression. An rvalue expression is either prvalue or xvalue.\nProperties:\nAddress of an rvalue cannot be taken by built-in address-of operator: \u0026amp;int(), \u0026amp;i++[3], \u0026amp;42, and \u0026amp;std::move(x) are invalid. An rvalue can\u0026rsquo;t be used as the left-hand operand of the built-in assignment or compound assignment operators. An rvalue may be used to initialize a const lvalue reference, in which case the lifetime of the temporary object identified by the rvalue is extended until the scope of the reference ends An rvalue may be used to initialize an rvalue reference, in which case the lifetime of the temporary object identified by the rvalue is extended until the scope of the reference ends. (Since C++ 11) When used as a function argument and when two overloads of the function are available, one taking rvalue reference parameter and the other taking lvalue reference to const parameter, an rvalue binds to the rvalue reference overload (thus, if both copy and move constructors are available, an rvalue argument invokes the move constructor, and likewise with copy and move assignment operators). (Since C++ 11) Here you only need a basic understanding of lvalues and rvalues, and we may do a more in-depth discussion later with references.\narray\n​\tAn array is a data form that can hold several values,all of one type. Each value is stored in a separate array element, and the computer stores all the elements of an array consecutively in memory.\n​\tTo create an array, you use a declaration statement. An array declaration should indicate three things:\nThe type of value to be stored in each element\nThe name of the array\nThe number of elements in the array\nEach element, in essence, is a variable that you can treat as a simple variable.\nThis is the general form for declaring an array\n1 typeName arrayName[arraySize]; ​\tThe expression arraySize, which is the number of elements, must be an integer constant, such as 10 or a const value, or a constant expression, such as 8 * sizeof (int), for which all values are known at the time compilation takes place. In particular, arraySize cannot be a variable whose value is set while the program is running. How ever, later in this chapter you’ll learn how to use the new operator to get around that restriction.\nFor C language, before the C99 standard, the size of the array must be a constant or a constant expression (sizeof() is regarded as an integer constant), and the array length must be specified in the source code. But after the introduction of VLA in C99, you can use variables to specify the array length. But notice that VLA could not be initialized, we'll talk about later. As for C++, in fact, the C++ standard does not provide any support for VLA. If your compilation can pass, it is an extension added by the compiler (GCC, Clang++). If you are using VS, then in MSVC The admiral failed to compile. If you wanna really really wanna use it, you can use const or constexpr keyword, and maybe the better idea is to use std::vector or std::array. ​\tAn array is called a compound type because it is built from some other type. You can’t simply declare that something is an array; it always has to be an array of some particular type. There is no generalized array type. Instead, there are many specific array types, such as array of char or array of long. For example, consider this declaration:\n1 2 float loans[20]; using T = decltype(loans); ​\tThe T not “array”; rather, it is “array of float.” This emphasizes that the loans array is built from the float type.\n​\tYou can access array elements individually. The way to do this is to use a subscript, or an index, to number the elements. C++ array numbering starts with zero(not one). C++ uses a bracket notation with the index to specify an array element. . Note that the index of the last element is one less than the size of the array. Thus,an array declaration enables you to create a lot of variables with a single declaration,and you can then use an index to identify and access individual elements.\nThe Importance of Valid Subscript Values The compiler does not check to see if you use a valid subscript. For instance, the compiler won’t complain if you assign a value to the nonexistent element months[101]. But that assignment could cause problems when the program runs, possibly corrupting data or code, possibly causing the program to abort. So it is your responsibility to make sure that your program uses only valid subscript values.\nInitialize rules\n​\tC++ has several rules about initializing arrays. They restrict when you can do it,and they determine what happens if the number of array elements doesn’t match the number of values in the initializer. Let’s examine these rules.\n​\tYou can use the initialization form only when defining the array. You cannot use it later, and you cannot assign one array wholesale to another, and for VLA in C, initialize is not allowed:\n1 2 3 4 5 6 7 int cards[4] = {3, 6, 8, 10}; // okay int hand[4]; // okay hand[4] = {5, 6, 7, 9}; // not allowed hand = cards; // not allowed int size = 5; char arr[size] = {\u0026#39;h\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;o\u0026#39;}; // not allowed in C // but allowed in GCC/Clang++ ​\tHowever, you can use subscripts and assign values to the elements of an array individually. When initializing an array, you can provide fewer values than array elements. If you partially initialize an array, the compiler sets the remaining elements to zero (\u0026rsquo;\\0\u0026rsquo; for char array). If you leave the square brackets ([]) empty when you initialize an array, the C++ compiler counts the elements for you. Suppose, for example, that you make this declaration, the compiler makes things an array of four elements:\n1 short things[] = {1, 1, 4, 5} How to get the amount of array\u0026rsquo;s elements?\n1 2 int arr[] = {1, 1, 4, 5, 1, 4}; int num_elements = sizeof(things) / sizeof(short) C++11 Array Initialization\n​\tFirst, you can drop the = sign when initializing an array:\n1 double earnings[4] {1.2e4, 1.6e4, 1.1e4, 1.7e4}; // okay with C++11 ​\tSecond, you can use empty braces to set all the elements to 0 (\u0026rsquo;\\0\u0026rsquo; in char array):\n1 int counts[10] = {}; // all elements set to 0 string\n​\tA string is a series of characters stored in consecutive bytes of memory. C++ has two ways of dealing with strings. The first, taken from C and often called a C-style string, and alternative method based on a string class library. Here we only discuss the second method. As for the first, it is the job of your C language teacher.\n​\tThe ISO/ANSI C++98 Standard expanded the C++ library by adding a string class. So now, instead of using a character array to hold a string, you can use a type string variable (or object, to use C++ terminology).As you’ll see, the string class is simpler to use than the array and also provides a truer representation of a string as a type.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; // make string class available int main() { char charr1[20]; // create an empty array char charr2[20] = \u0026#34;jaguar\u0026#34;; // create an initialized array std::string str1; // create an empty string object std::string str2 = \u0026#34;panther\u0026#34;; // create an initialized string std::cout \u0026lt;\u0026lt; \u0026#34;Enter a kind of feline: \u0026#34;; std::cin \u0026gt;\u0026gt; charr1; std::cout \u0026lt;\u0026lt; \u0026#34;Enter another kind of feline: \u0026#34;; std::cin \u0026gt;\u0026gt; str1; // use cin for input std::cout \u0026lt;\u0026lt; \u0026#34;Here are some felines:\\n\u0026#34;; std::cout \u0026lt;\u0026lt; charr1 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; charr2 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; str1 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; str2 // use cout for output \u0026lt;\u0026lt; endl; std::cout \u0026lt;\u0026lt; \u0026#34;The third letter in \u0026#34; \u0026lt;\u0026lt; charr2 \u0026lt;\u0026lt; \u0026#34; is \u0026#34; \u0026lt;\u0026lt; charr2[2] \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;The third letter in \u0026#34; \u0026lt;\u0026lt; str2 \u0026lt;\u0026lt; \u0026#34; is \u0026#34; \u0026lt;\u0026lt; str2[2] \u0026lt;\u0026lt; std::endl; // use array notation return 0; } ​\tYou should learn from this example that, in many ways, you can use a string object in the same manner as a character array:\nYou can initialize a string object to a C-style string.\nYou can use cin to store keyboard input in a string object.\nYou can use cout to display a string object.\nYou can use array notation to access individual characters stored in a string object\nThe main difference between string objects and character arrays is that you declare a string object as a simple variable, not as an array. Using a string object both more convenient and safer than using an array. Conceptually, one thinks of an array of char as a collection of char storage units used to store a string but of a string class variable as a single entity representing the string.\nString initialization is as same as char array.\nAssignment, Concatenation, and Appending\n​\tThe string class makes some operations simpler than is the case for arrays. For example, you can’t simply assign one array to another. You can only use strcpy/strncpy (in \u0026lt;string.h\u0026gt; or ) to copy an array to another, which is considered not safe. But you can assign one string object to another:\n1 2 3 4 5 6 char charr1[20]; // create an empty array char charr2[20] = \u0026#34;jaguar\u0026#34;; // create an initialized array string str1; // create an empty string object string str2 = \u0026#34;panther\u0026#34;;\t// create an initialized string charr1 = charr2; // INVALID, no array assignment str1 = str2; // VALID, object assignment ok ​\tThe string class simplifies combining strings. In C, you need to use strcat/strncat (in \u0026lt;string.h\u0026gt; or ) which is also unsafe. In C++, you can use the + operator to add two string objects together and the += operator to tack on a string to the end of an existing string object. Continuing with the preceding code, we have the following possibilities:\n1 2 3 string str3; str3 = str1 + str2; // assign str3 the joined strings str1 += str2; // add str2 to the end of str1 ​\tThe string class can automatic resizing as necessary, is you wanna get the length of a string object at that time, use std::string::size() or std::string::length().\n1 2 3 4 5 char arr[] = {\u0026#34;Let us all unite!\u0026#34;}; std::string str = \u0026#34;Let us all unite!\u0026#34;; std::cout \u0026lt;\u0026lt; str.size() \u0026lt;\u0026lt; \u0026#39; \u0026#39; \u0026lt;\u0026lt; str.length() \u0026lt;\u0026lt; \u0026#39; \u0026#39; \u0026lt;\u0026lt; strlen(arr) \u0026lt;\u0026lt; std::endl; We will learn more about its features when we study STL (Standard Template Library) later.\n","date":"2023-10-25T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%AC%AC%E4%B8%80%E8%8A%82/","title":"实验室 C++ 基础课程 · 第二章第一节"},{"content":"C++ Basic Course Chapter 1 —— Hello, C++! Basic syntax Our goal is to completely understand the code below!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 #include \u0026lt;iostream\u0026gt; #include \u0026lt;typeinfo\u0026gt; using namespace std; // Function prototypes void swap(int, int); void swap(int*, int*); void swapPointer(int*, int*); void swapReference(int\u0026amp;, int\u0026amp;); // Inline function to print variable values inline void output(const int\u0026amp; p, const int\u0026amp; q = 0) { cout \u0026lt;\u0026lt; \u0026#34;a: \u0026#34; \u0026lt;\u0026lt; p \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;b: \u0026#34; \u0026lt;\u0026lt; q \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; } int main() { int a, b; cout \u0026lt;\u0026lt; \u0026#34;Enter two integers: \u0026#34;; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; \u0026#34;Before swap: \u0026#34; \u0026lt;\u0026lt; endl; output(a, b); cout \u0026lt;\u0026lt; \u0026#34;Address of a: \u0026#34; \u0026lt;\u0026lt; \u0026amp;a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address of b: \u0026#34; \u0026lt;\u0026lt; \u0026amp;b \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; swap(a, b); cout \u0026lt;\u0026lt; \u0026#34;After swap(int, int): \u0026#34; \u0026lt;\u0026lt; endl; output(a, b); swap(\u0026amp;a, \u0026amp;b); cout \u0026lt;\u0026lt; \u0026#34;After swap(int*, int*): \u0026#34; \u0026lt;\u0026lt; endl; output(a, b); swapPointer(\u0026amp;a, \u0026amp;b); cout \u0026lt;\u0026lt; \u0026#34;After swapPointer(int*, int*): \u0026#34; \u0026lt;\u0026lt; endl; output(a, b); swapReference(a, b); cout \u0026lt;\u0026lt; \u0026#34;After swapReference(int\u0026amp;, int\u0026amp;): \u0026#34; \u0026lt;\u0026lt; endl; output(a, b); return 0; } // Value-passing version void swap(int a, int b) { int tmp = a; a = b; b = tmp; cout \u0026lt;\u0026lt; \u0026#34;In function swap(int, int): \u0026#34; \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;a: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;b: \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address of a: \u0026#34; \u0026lt;\u0026lt; \u0026amp;a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address of b: \u0026#34; \u0026lt;\u0026lt; \u0026amp;b \u0026lt;\u0026lt; endl; } // Pointer-passing version void swap(int* a, int* b) { decltype(a) tmp = a; a = b; b = tmp; cout \u0026lt;\u0026lt; \u0026#34;In function swap(int*, int*) after swap: \u0026#34; \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;type of tmp: \u0026#34; \u0026lt;\u0026lt; typeid(tmp).name() \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address that a points to: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address that b points to: \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Value that the address a points to stored: \u0026#34; \u0026lt;\u0026lt; *a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Value that the address b points to stored: \u0026#34; \u0026lt;\u0026lt; *b \u0026lt;\u0026lt; endl; } // Pointer-passing version void swapPointer(int* a, int* b) { int tmp = *a; *a = *b; *b = tmp; cout \u0026lt;\u0026lt; \u0026#34;In function swapPointer(int*, int*) after swap: \u0026#34; \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address that a points to: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address that b points to: \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Value that the address a points to stored: \u0026#34; \u0026lt;\u0026lt; *a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Value that the address b points to stored: \u0026#34; \u0026lt;\u0026lt; *b \u0026lt;\u0026lt; endl; } // Reference-passing version void swapReference(int\u0026amp; a, int\u0026amp; b) { auto tmp = a; a = b; b = tmp; cout \u0026lt;\u0026lt; \u0026#34;In function swapReference(int\u0026amp;, int\u0026amp;) after swap: \u0026#34; \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;type of tmp: \u0026#34; \u0026lt;\u0026lt; typeid(tmp).name() \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;a: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;b: \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address of a \u0026#34; \u0026lt;\u0026lt; \u0026amp;a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;Address of b \u0026#34; \u0026lt;\u0026lt; \u0026amp;b \u0026lt;\u0026lt; endl; } The C++ Preprocessor\n​\tC++, like C, uses a preprocessor. This is a program that processes a source file before the main compilation takes place. You don’t have to do anything special to invoke this preprocessor. It automatically operates when you compile the program.\n1 #include \u0026lt;iostream\u0026gt;\t// a PREPROCESSOR directive ​\tThis directive causes the preprocessor to add the contents of the iostream file to your program. This is a typical preprocessor action: adding or replacing text in the source code before it’s compiled. In essence, the contents of the iostream file replace the #include \u0026lt;iostream\u0026gt; line in the program. Your original file is not altered, but a composite file formed from your file and iostream goes on to the next stage of compilation.\nheader\nKind of header Convention Example Comments C++ old style Ends in .h iostream.h Usable by C++ programs C old style Ends in .h math.h Usable by C and C++ programs C++ new style No extension iostream Usable by C++ programs, uses namespace std Converted C c prefix, no extension cmath Usable by C++ programs, might use non-C features, such as namespace std namespace\n​\tNamespace support is a C++ feature designed to simplify the writing of large programs and of programs that combine pre-existing code from several vendors and to help organize programs.\n​\tOne potential problem is that you might use two prepackaged products that both have, say, a function called wanda(). If you then use the wanda() function, the compiler won’t know which version you mean.\n​\tThe namespace facility lets a vendor package its wares in a unit called a namespace so that you can use the name of a namespace to indicate which vendor’s product you want. So Microflop Industries could place its definitions in a namespace called Microflop.Then Microflop::wanda() would become the full name for its wanda() function. Similarly, Piscine::wanda() could denote Piscine Corporation’s version of wanda().\n​\tThus, your program could now use the namespaces to discriminate between various versions:\n1 2 Microflop::wanda(\u0026#34;go dancing?\u0026#34;);\t// use Microflop namespace version Piscine::wanda(\u0026#34;a fish named Desire\u0026#34;)\t// use Piscine namespace version ​ The using directive like using namespace std makes all the names in the std namespace available. Modern practice regards this as a bit lazy and potentially a problem in large projects. The preferred approaches are to use the std:: qualifier or to use something called a using declaration to make just particular names available:\n1 2 3 using std::cout; using std::cin; using std::endl; ​\tHowever, for me, it is more customary not to use the using directive.\n​\tIn addition, the using directive can also give aliases to types:\n1 using i64 = long long; ​ It is somewhat similar to #define LL long long, but still different:\nScope: \u0026ldquo;using i64 = long long;\u0026rdquo; is the syntax for creating a type alias in C++, and its scope is limited to the current namespace or scope. On the other hand, \u0026ldquo;#define i64 long long\u0026rdquo; is a preprocessing directive in C and C++ that performs text replacement during the preprocessing phase, and its scope extends throughout the entire source file.\nType Safety: \u0026ldquo;using i64 = long long;\u0026rdquo; preserves type safety when creating a type alias. \u0026ldquo;i64\u0026rdquo; and \u0026ldquo;long long\u0026rdquo; are essentially the same type with just a different name. This means that when using \u0026ldquo;i64,\u0026rdquo; the compiler performs type checking to ensure that only \u0026ldquo;long long\u0026rdquo; operations are allowed.\n\u0026ldquo;#define i64 long long\u0026rdquo; is a simple text replacement and lacks type checking. When using \u0026ldquo;i64,\u0026rdquo; the preprocessor replaces all occurrences of \u0026ldquo;i64\u0026rdquo; with \u0026ldquo;long long\u0026rdquo; without performing type checks.\nLife time: The type alias created with \u0026ldquo;using i64 = long long;\u0026rdquo; remains valid for the entire lifetime of the program and can be used anywhere in the code. In contrast, the text replacement performed by \u0026ldquo;#define i64 long long\u0026rdquo; is only effective within the current source file and does not affect other files.\ncomments\n​\tThe double slash (//) introduces a C++ comment. A comment is a remark from the programmer to the reader that usually identifies a section of a program or explains some aspect of the code. The compiler ignores comments.\nC++ also recognizes C comments, which are enclosed between /* and */ symbols:\n1 #include \u0026lt;iostream\u0026gt; /* a C-style comment */ cout \u0026amp;\u0026amp; cin\n​\tFor now, you only need to know that cin is used for input, similar to scanf, and cout is used for output, similar to printf. We will explain it in more depth when we reach stream in the lesson.\n​\tYou can currently understand it this way, cout and cin are both intelligent and do not need to specify the type. \u0026lt;\u0026lt; is the output operator and \u0026gt;\u0026gt; is the read operator. The input and output can be spliced through corresponding operators. For example, std::cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; is to read the two values a and b; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; b; is to output a, b these two values.\n​\tMoreover, C++’s free format rules treat newlines and spaces between tokens interchangeably, so you can write code like this:\n1 2 3 4 5 6 7 8 std::cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; std::cout \u0026lt;\u0026lt; \u0026#34;a is: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, and b is: \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; endl; The Manipulator endl\n​\tendl is a special C++ notation that represents the important concept of beginning a new line. Special notations like endl that have particular meanings to cout are dubbed manipulators. Like cout, endl is defined in the iostream header file and is part of the std namespace.\n​\tNote that the cout facility does not move automatically to the next line when it prints a string, the output for each cout statement begins where the last output ended.\n​\tYou can still use \\n in C++\nOther manipulators\nstd::setw - Set the field width for the next output. std::setprecision - Set the decimal precision for floating-point output. std::setfill - Set the fill character used for padding. std::left and std::right - Set the text alignment for output. std::fixed - Display floating-point numbers in fixed-point notation. std::scientific - Display floating-point numbers in scientific (exponential) notation. std::boolalpha - Display boolean values as \u0026ldquo;true\u0026rdquo; or \u0026ldquo;false\u0026rdquo; instead of 1 or 0. std::uppercase - Output letters in uppercase. std::nouppercase - Output letters in lowercase. std::showpos - Always show the plus sign for positive numbers. std::noshowpos - Do not show the plus sign for positive numbers. std::hex, std::oct, and std::dec - Set the output base (hexadecimal, octal, or decimal). std::setbase - Set the base for numeric input and output. std::noskipws - Disable skipping of leading whitespace when reading from input. function\n​\tBecause functions are the modules from which C++ programs are built and because they are essential to C++ OOP definitions, you should become thoroughly familiar with them. Some aspects of functions are advanced topics, so the main discussion of functions comes later (maybe).\n​\tHowever, if we deal now with some basic characteristics of functions, you’ll be more at ease and more practiced with functions later.\nfunction form\n1 2 3 returnType functionName(argumentList) { statements; } ​\tIf return type is void, that means the function returns nothing, you can use return; statement to end the function, or let the program run to the end of the function automatically.\n​\tSimilarly, if the argument is void, then it means that the arguments are not accepted, and foo(void) and foo() have the same meaning.\n​\tHowever, it should be noted that in C, the argumentList is empty, which means silence to accept arguments, rather than not accepting the arguments, unless explicitly declared as foo(void)\n1 2 3 4 5 6 7 8 9 10 11 12 13 ... void foo() { printf(\u0026#34;Function running\\n\u0026#34;); } ... foo(1); ... // In C++ error: too many arguments to function \u0026#39;void foo()\u0026#39; foo(1); note: declared here void foo() { printf(\u0026#34;Function running\\n\u0026#34;); } /* In C */ Function running function header\n​\tThe output() function in code has this header\n1 void output(int p, int q); ​\tAs we said before, the initial void means that little poor output() has no return value. So you can\u0026rsquo;t use it this way:\n1 2 3 4 auto var = output(a, b); error: \u0026#39;void var\u0026#39; has incomplete type 21 | auto var = output(a, b); ​\tThe int p, int q within the parentheses means that you are expected to use output() with two arguments of type int. The p, q are new variables assigned the value passed during a function call.\n​\tWhat\u0026rsquo;s more, a, b in the function call are argument / actual parameter, p, q in the function header are parameter / formal parameter. In function prototypes, the name of the parameter / formal parameter can be ignored, you just need to keep the types.\nrecursion\n​\tAnd now for something completely different. A C++ function has the interesting characteristic that it can call itself. (Unlike C, however, C++ does not let main() call itself.) This ability is termed recursion. In computer science, recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion is an important tool in certain types of programming, such as artificial intelligence, Depth-First Search, Breadth-First Search, but we’ll just take a superficial look (artificial shallowness) at how it works.\n​\tA recursive function definition has one or more base cases, meaning input(s) for which the function produces a result trivially (without recurring), and one or more recursive cases, meaning input(s) for which the program recurs (calls itself).\n​\tIf a recursive function calls itself, then the newly called function calls itself, and so on, ad infinitum unless the code includes something to terminate the chain of calls (base cases). The usual method is to make the recursive call part of an if statement. For example, a type void recursive function called recurs() can have a form like this:\n1 2 3 4 5 6 7 void recurs(argumentList) { statements1; if (test) recurs(arguments); statements2; } inline\n​\tInline functions are a C++ enhancement designed to speed up programs. The primary distinction between normal functions and inline functions is not in how you code them but in how the C++ compiler incorporates them into a program. To understand the distinction between inline functions and normal functions, you need to peer more deeply into a program’s innards than we have so far. So we won’t go into too deep an explanation, just briefly talk about the differences.\n​\tFor ordinary functions, when the function is called, the program will jump to the function to continue execution, and then jump back after executing the function. Jumping back and forth and keeping track of where to jump means that there is an overhead in elapsed time to using functions.\n​\tC++ inline functions provide an alternative. In an inline function, the compiled code is “in line” with the other code in the program. That is, the compiler replaces the function call with the corresponding function code. With inline code, the program doesn’t have to jump to another location to execute the code and then jump back.\n​\tInline functions thus run a little faster than regular functions, but they come with a memory penalty. If a program calls an inline function at ten separate locations, then the program winds up with ten copies of the function inserted into the code.\n​\tYou should be selective about using inline functions. If the time needed to execute the function code is long compared to the time needed to handle the function call mechanism, then the time saved is a relatively small portion of the entire process.\n​\tIf the code execution time is short, then an inline call can save a large portion of the time used by the non-inline call. On the other hand, you are now saving a large portion of a relatively quick process, so the absolute time savings may not be that great unless the function is called frequently.\n​\tTo use this feature, you must take at least one of two actions:\nPreface the function declaration with the keyword inline.\nPreface the function definition with the keyword inline.\nIt should be noted that inline functions cannot be recursive, or recursive functions cannot be inline with the keyword\ndefault arguments\n​\tLet’s look at another topic from C++’s bag of new tricks: the default argument. A default argument is a value that’s used automatically if you omit the corresponding actual argument from a function call. For example, if you set up void wow(int n) so that n has a default value of 1, the function call wow() is the same as wow(1).This gives you flexibility in how you use a function.\n​\tHow do you establish a default value? You must use the function prototype. Because the compiler looks at the prototype to see how many arguments a function uses, the function prototype also has to alert the program to the possibility of default arguments. The method is to assign a value to the argument in the prototype.\n​\tWhen you use a function with an argument list, you must add defaults from right to left.That is, you can’t provide a default value for a particular argument unless you also provide defaults for all the arguments to its right:\n1 2 3 int harpo(int n, int m = 4, int j = 5); // VALID int chico(int n, int m = 6, int j);\t// INVALID int groucho(int k = 1, int m = 2, int n = 3); // VALID For example, the harpo() prototype permits calls with one, two, or three arguments:\n1 2 3 beeps = harpo(2); // same as harpo(2,4,5) beeps = harpo(1,8); // same as harpo(1,8,5) beeps = harpo (8,7,6); // no default arguments used ​\tThe actual arguments are assigned to the corresponding formal arguments from left to right; you can’t skip over arguments. Thus, the following isn’t allowed:\n1 beeps = harpo(3, ,8); // invalid, doesn\u0026#39;t set m to 4 ​\tDefault arguments aren’t a major programming breakthrough; rather, they are a convenience. When you begin working with class design, you’ll find that they can reduce the number of constructors, methods,and method overloads you have to define.\n​\tNote that only the prototype indicates the default. The function definition is the same as it would be without default arguments\nfunction polymorphism / function overloading\n​\tIn C, you are not allowed to write the code like this:\n1 2 3 4 5 6 7 ... void swap(int, int); void swap(int*, int*); ``` swap(a, b); swap(\u0026amp;a, \u0026amp;b); ... ​\tYou\u0026rsquo;ll get a bunch of error:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 error: conflicting types for \u0026#39;swap\u0026#39;; have \u0026#39;void(int *, int *)\u0026#39; 4 | void swap(int*, int*); | ^~~~ note: previous declaration of \u0026#39;swap\u0026#39; with type \u0026#39;void(int, int)\u0026#39; 3 | void swap(int, int); | ^~~~ In function \u0026#39;main\u0026#39;: warning: passing argument 1 of \u0026#39;swap\u0026#39; makes pointer from integer without a cast [-Wint-conversion] 9 | swap(a, b); | ^ | | | int note: expected \u0026#39;int *\u0026#39; but argument is of type \u0026#39;int\u0026#39; 4 | void swap(int*, int*); | ^~~~ warning: passing argument 2 of \u0026#39;swap\u0026#39; makes pointer from integer without a cast [-Wint-conversion] 9 | swap(a, b); | ^ | | | int note: expected \u0026#39;int *\u0026#39; but argument is of type \u0026#39;int\u0026#39; 4 | void swap(int*, int*); | ^~~~ At top level: error: conflicting types for \u0026#39;swap\u0026#39;; have \u0026#39;void(int *, int *)\u0026#39; 19 | void swap(int* p, int* q) { | ^~~~ note: previous definition of \u0026#39;swap\u0026#39; with type \u0026#39;void(int, int)\u0026#39; 15 | void swap(int p, int q) { | ^~~~ ​\tBut just like you saw before, it\u0026rsquo;s not only allowed in C++, but also very very very widely used.\n​\tFunction polymorphism is a neat C++ addition to C’s capabilities. Whereas default arguments let you call the same function by using varying numbers of arguments, function polymorphism, also called function overloading, lets you use multiple functions sharing the same name.\n​\tThe word polymorphism means having many forms, so function polymorphism lets a function have many forms. Similarly, the expression function overloading means you can attach more than one function to the same name, thus overloading the name. Both expressions boil down to the same thing, but we’ll usually use the expression function overloading—it sounds harder working. You can use function overloading to design a family of functions that do essentially the same thing but using different argument lists.\n​\tThe key to function overloading is a function’s argument list, also called the function signature. If two functions use the same number and types of arguments in the same order, they have the same signature; the variable names don’t matter.\n​\tC++ enables you to define two functions by the same name, provided that the functions have different signatures. The signature can differ in the number of arguments or in the type of arguments, or both. For example, you can define a set of print() functions with the following prototypes:\n1 2 3 4 5 void print(const char* str, int width);\t// #1 void print(double d, int width);\t// #2 void print(long l, int width);\t// #3 void print(int i, int width);\t// #4 void print(const char* str);\t// #5 ​\tWhen you then use a print() function, the compiler matches your use to the prototype that has the same signature:\n1 2 3 4 5 print(\u0026#34;Pancakes\u0026#34;, 15);\t// use #1 print(\u0026#34;Syrup\u0026#34;);\t// use #5 print(1999.0, 10);\t// use #2 print(1999, 12);\t// use #4 print(1999L, 15);\t// use #3 ​\tWhen you use overloaded functions, you need to be sure you use the proper argument types in the function call. For example, consider the following statements:\n1 2 unsigned int year = 2023; print(year, 6);\t// ambiguous call ​\tWhich prototype does the print() call match here? It doesn’t match any of them! A lack of a matching prototype doesn’t automatically rule out using one of the functions because C++ will try to use standard type conversions to force a match.\n​\tIf, say, the only print() prototype were #2, the function call print(year, 6) would convert the year value to type double. But in the earlier code there are three prototypes that take a number as the first argument, providing three different choices for converting year. Faced with this ambiguous situation, C++ rejects the function call as an error.\n1 2 3 4 5 6 7 8 9 10 11 12 error: call of overloaded \u0026#39;print(unsigned int\u0026amp;, int)\u0026#39; is ambiguous 19 | print(year, 6); | ~~~~~^~~~~~~~~ note: candidate: \u0026#39;void print(double, int)\u0026#39; 10 | void print(double d, int width); | ^~~~~ note: candidate: \u0026#39;void print(long int, int)\u0026#39; 11 | void print(long l, int width); | ^~~~~ note: candidate: \u0026#39;void print(int, int)\u0026#39; 12 | void print(int i, int width); | ^~~~~ ​\tSome signatures that appear to be different from each other nonetheless can’t coexist. For example, remember the code we gave at first? Can I change the name of swapReference() to swap()? The answer is no! We\u0026rsquo;ll explain it later when we talk about reference.\n​\tKeep in mind that the signature, not the function type, enables function overloading. For example, the following two declarations are incompatible:\n1 2 3 4 5 6 7 8 long gronk(int n, float m);\t// same signatures double gronk(int n, float m);\t// hence not allowed error: ambiguating new declaration of \u0026#39;double gronk(int, float)\u0026#39; 10 | double gronk(int n, float m); | ^~~~~ note: old declaration \u0026#39;long int gronk(int, float)\u0026#39; 9 | long gronk(int n, float m); ​\tTherefore, C++ doesn’t permit you to overload gronk() in this fashion. You can have different return types, but only if the signatures are also different:\n1 2 long gronk(int n, float m); double gronk(double n, float m); ","date":"2023-10-24T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%AC%E4%B8%89%E8%8A%82/","title":"实验室 C++ 基础课程 · 第一章第三节"},{"content":"C++ Basic Course Chapter 1 —— Hello, C++! What is C++? C++ = C + Object-Oriented Programming + Generic Programming\nC Programming Philosophy ​\tLet\u0026rsquo;s talk about C programming philosophy first. Like most mainstream language when C was created, C is a procedural language. That means it emphasizes the algorithm side of programming. Conceptually, procedural programming consists of figuring out the actions a computer should take and then using the programming language to implement those actions. In short, Data + algorithms = program. BTW, procedural programming, AKA Procedural-Oriented Programming.\n​\tEarlier procedural languages, such as FORTRAN and BASIC, ran into organizational problems as problems as programs grew larger. Many older programs had such tangled routing (called \u0026ldquo;spaghetti programming\u0026rdquo;) that is virtually impossible to understand a program by reading it, and modifying such a program was an invitation to disaster. In response, computer scientists developed a more disciplined style of programming called structured programming. C includes features to facilitate this approach. The primary idea behind structured programming is to avoid the use of undesirable control flow structures such as infinite loops, unrestricted goto statements, and deeply nested conditional statements, and instead focus on using clear, organized control structures.\n​\tStructured programming has the following characteristics:\nSequential Structure: Programs execute statements sequentially, from top to bottom, one after the other.\nSelection Structure: Conditional statements are used to choose different code blocks for execution based on specific conditions.\noperators\nrelational operator\n\u0026lt;, \u0026gt; \u0026lt;=, \u0026gt;= ==, != logical operator\n\u0026amp;\u0026amp;\n​\tThe logical AND operator, written \u0026amp;\u0026amp;, also combines two expressions into one. The resulting expression has the value true only if both of the original expressions are true.\n​\tBecause the \u0026amp;\u0026amp; (and ||) has a lower precedence than the relational operators, you don’t need to use parentheses in these expressions.\n​\tC++ specifies that the \u0026amp;\u0026amp; (and ||) operator serves as a sequence point. In other words, any value changes on the left side occur before the right side is evaluated. (Or, in the updated terminology of C++11, the subexpression on the left side of the operator is sequenced before the subexpression on the right side.) This means that you can assert the higher priority of the left side over the right side.\n||\n​\tIn English, the word or can indicate when one or both of two conditions satisfy a requirement. The C++ equivalent is the logical OR operator, written ||.\n​\tThis operator combines two expressions into one. If either or both of the original expressions is true, or nonzero, the resulting expression has the value true. Otherwise, the expression has the value false.\n!\n​\tThe ! operator negates, or reverses the truth value of, the expression that follows it. That is, if expression is true, then !expression is false—and vice versa. More precisely, if expression is true, or nonzero, then !expression is false. Incidentally, many people call the exclamation point bang, making !x “bang-ex” and !!x “bang-bang-ex.”\nlogical operator facts\n​\tAs mentioned earlier, the C++ logical OR and logical AND operators have a lower precedence than relational operators. The ! operator, on the other hand, has a higher precedence than any of the relational or arithmetic operators. Therefore, to negate an expression, you should enclose the expression in parentheses.\n​\tThe logical AND operator has a higher precedence than the logical OR operator.Thus this expression:\n1 age \u0026gt; 30 \u0026amp;\u0026amp; age \u0026lt; 45 || weight \u0026lt; 300 means the following:\n1 (age \u0026gt; 30 \u0026amp;\u0026amp; age \u0026lt; 45) || weight \u0026lt; 300 ​\tAlthough the C++ operator precedence rules often make it possible to write compound comparisons without using parentheses, the simplest course of action is to use parentheses to group the tests, whether or not the parentheses are needed. It makes the code easier to read, it doesn’t force someone else to look up some of the less commonly. used precedence rules, and it reduces the chance of making errors because you don’t quite remember the exact rule that applies.\n​\tC++ guarantees that when a program evaluates a logical expression, it evaluates it from left to right and stops evaluation as soon as it knows what the answer is.\nalternative representations\n​\tNot all keyboards provide all the symbols used for the logical operators, so the C++ Standard provides alternative representations, as shown in Table. The identifiers and, or, and not are C++ reserved words, meaning that you can’t use them as names for variables and so on. They are not considered keywords because they are alternative representations of existing language features. Incidentally, these are not reserved words in C, but a C program can use them as operators, provided that the program includes the iso646.h header file. C++ does not require using a header file.\noperator alternative representation \u0026amp;\u0026amp; and || or ! not bitwise operations operator\n​\tIt should be noted that bitwise operators have lower precedence than ordinary arithmetic operators.\n​\tBitwise operations are calculations performed based on the binary representation of integers. Since computers store data internally in binary, bitwise operations are quite fast.\n​\tThere are six basic bitwise operations: bitwise AND, bitwise OR, bitwise XOR, bitwise NOT, left shift, and right shift.\n\u0026amp;, |, ^ Operation Operator Mathematical Symbol Explanation AND \u0026amp; \u0026amp;, and 1 only when both corresponding bits are 1 OR | |, or 1 if at least one of the corresponding bits is 1 XOR ^ $\\oplus$, xor 1 only when corresponding bits are different ​\tCertainly, it\u0026rsquo;s important to distinguish between logical AND ( represented by \u0026amp;\u0026amp; ) and bitwise AND, as well as between logical OR ( || ) and bitwise OR.\n​\tXOR, short for Exclusive OR, is a logical operation used to compare the dissimilarity of two values. In XOR, if the two operands (typically Boolean values) are different, the result is true; if the operands are the same, the result is false. The XOR operation is usually represented by the \u0026ldquo;^\u0026rdquo; symbol.\n​\tHere is the truth table for the XOR operation:\nInput A Input B Output (A XOR B) 0 0 0 0 1 1 1 0 1 1 1 0 ~\n​\tBitwise NOT is a unary operation performed on a number (num) in binary representation. It does not have a commonly used mathematical symbol and is represented by the operator ~. Its purpose is to invert all the bits (0 becomes 1, and 1 becomes 0) in the two\u0026rsquo;s complement binary representation of num. In the bitwise NOT operation, the sign bit of a signed integer will also be inverted.\n​\tTwo\u0026rsquo;s complement: In binary representation, the two\u0026rsquo;s complement of a positive number or zero is the number itself, while the two\u0026rsquo;s complement of a negative number is obtained by bitwise inverting the corresponding positive number and then adding one.\n​\tExample (for signed integers): $$ \\begin{aligned} 5 \u0026= (00000101)_2 \\\\ \\sim 5 \u0026= (11111010)_2 = -6 \\\\ \\text{The two's complement of} -5 \u0026= (11111011)_2 \\\\ \\sim (-5) \u0026= (00000100)_2 = 4 \\end{aligned} $$ \u0026laquo;, \u0026raquo;\n​\tThe num \u0026lt;\u0026lt; i operation represents shifting the binary representation of num to the left by i positions.\n​\tThe num \u0026gt;\u0026gt; i operation represents shifting the binary representation of num to the right by i positions.\n​\tFor example: $$ \\begin{aligned} 11 \u0026= (00001011)_2 \\\\ 11 \u003c\u003c 3 \u0026= (01011000)_2 = 88 \\\\ 11 \u003e\u003e 2 \u0026= (00000010)_2 = 2 \\end{aligned} $$ ​\tIn shift operations, certain conditions lead to undefined behavior:\nWhen the right operand (i.e., the number of positions to shift) is negative.\nWhen the right operand is greater than or equal to the number of bits in the left operand.\nFor example, for a variable a of type int, a \u0026lt;\u0026lt; -1 and a \u0026lt;\u0026lt; 32 both result in undefined behavior.\nIn left shift operations, it is crucial to ensure that the shifted result can be accommodated within the original variable\u0026rsquo;s type; otherwise, the behavior is undefined. Left-shifting a negative number is also undefined.\nIn right shift operations, the excess bits on the right are discarded. However, the behavior on the left side is more complex:\nFor unsigned numbers, zeros are filled in on the left. For signed numbers, the most significant bit (the sign bit) is used to fill in on the left. In practice, this means filling with zeros for non-negative numbers and ones for negative numbers. statements\nif / if \u0026ndash; else / if \u0026ndash; else if \u0026ndash; else\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // emphasizes the block structure for the statements if (test_expr1) { statement1; } else if (testexpr2) { statement2; } else { testexpr3; } // more closely ties the blocks to the keywords if and else. if (test_expr1) { statement1; } else if (testexpr2) { statement2; } else { testexpr3; } ​\tKeep in mind that the two alternatives in an if else statement must be single statements. If you need more than one statement, you must use braces to collect them into a single block statement. Unlike some languages, such as BASIC and FORTRAN, C++ does not automatically consider everything between if and else a block, so you have to use braces to make the statements a block. The following code, for example, produces a compiler error:\n1 2 3 4 5 6 7 8 9 10 11 12 13 ... if (ch == \u0026#39;Z\u0026#39;) ++ zorro; std::cout \u0026lt;\u0026lt; \u0026#34;Another zorro candidate\u0026#34; \u0026lt;\u0026lt; std::endl; else ++ dull; std::cout \u0026lt;\u0026lt; \u0026#34;Not a zorro candidate\u0026#34; \u0026lt;\u0026lt; std::endl; ... In function \u0026#39;int main()\u0026#39;: error: \u0026#39;else\u0026#39; without a previous \u0026#39;if\u0026#39; 19 | else | ^~~~ : ?\n​\tC++ has an operator that can often be used instead of the if else statement. This operator is called the conditional operator, written ? :, and, for you trivia buffs, it is the only C++ operator that requires three operands. The general form looks like this:\n1 expression1 ? expression2 : expression3 ​\tWhich means the same thing as\n1 2 3 4 5 6 7 8 9 10 11 Type judge(Type expr1, Type expr2, Type expr3) { if (expr1) { return expr2; } else { return expr3; } } ​\tHence you could write a simple and precise max() or something:\n1 2 int c = a \u0026gt; b ? a : b auto result = (score \u0026gt;= passingScore) ? \u0026#34;Pass\u0026#34; : \u0026#34;Fail\u0026#34;; switch \u0026ndash; case\n​\tSuppose you create a screen menu that asks the user to select one of five choices—for example, Cheap, Moderate, Expensive, Extravagant, and Excessive. You can extend an if else if else sequence to handle five alternatives, but the C++ switch statement more easily handles selecting a choice from an extended list. Here’s the general form for a switch statement:\n1 2 3 4 5 6 7 8 switch (integer-expression) { case label1: statement(s) case label2: statement(s) ... case labeln: statement(s) default\t: statement(s) } ​\tA C++ switch statement acts as a routing device that tells the computer which line of code to execute next. On reaching a switch statement, a program jumps to the line labeled with the value corresponding to the value of integer-expression. The value integer-expression, as the name suggests, must be an expression that reduces to an integer value. Also each label must be an integer constant expression (like int or char).\n​\tIf integer-expression doesn’t match any of the labels, the program jumps to the line labeled default. The default label is optional. If you omit it and there is no match, the program jumps to the next statement following the switch.\n​\tEach C++ case label functions only as a line label, not as a boundary between choices. That is, after a program jumps to a particular line in a switch, it then sequentially executes all the statements following that line in the switch unless you explicitly direct it otherwise. Execution does not automatically stop at the next case. To make execution stop at the end of a particular group of statements, you must use the break statement. This causes execution to jump to the statement following the switch.\ncontinue / break\n​\tThe break and continue statements enable a program to skip over parts of the code. You can use the break statement in a switch statement and in any of the loops. It causes program execution to pass to the next statement following the switch or the loop. The continue statement is used in loops and causes a program to skip the rest of the body of the loop and then start a new loop cycle.\ngoto\n​\tC++, like C, also has a goto statement. A statement like this means to jump to the location bearing the paris: label:\n1 goto paris; ​\tThat is, you can have code like this:\n1 2 3 4 5 6 7 char ch; std::cin \u0026gt;\u0026gt; ch; if (ch == \u0026#39;p\u0026#39;) goto paris; std::cout \u0026lt;\u0026lt; ... ... pairs: std::cout \u0026lt;\u0026lt; \u0026#34;You\u0026#39;ve just arrived Paris!\u0026#34; \u0026lt;\u0026lt; std::endl; ​\tIn most circumstances (some would say in all circumstances), using goto is a bad hack, and you should use structured controls, such as if else, switch, continue, and the like, to control program flow.\nIteration Structure\n​\tLoop statements (e.g., for loops, while loops) are used to repeat a section of code until a specific condition is met.\nfor\n​\tA for loop provides a step-by-step recipe for performing repeated actions. Let’s take a detailed look at how it’s set up. The usual parts of a for loop handle these steps:\nSetting a value initially\nPerforming a test to see whether the loop should continue\nExecuting the loop actions\nUpdating value(s) used for the test\n​\tThe C++ loop design positions these elements so that you can spot them at a glance. The initialization, test, and update actions constitute a three-part control section enclosed in parentheses. Each part is an expression, and semicolons separate the expressions from each other. The statement following the control section is called the body of the loop, and it is executed as long as the test expression remains true:\n1 2 for (initialization; test_expression; update_expression) body ​\tC++ syntax counts a complete for statement as a single statement, even though it can incorporate one or more statements in the body portion. (Having more than one statement requires using a compound statement, or block.) The loop performs initialization just once. Typically, programs use this expression to set a variable to a starting value and then use the variable to count loop cycles. Test-expression determines whether the loop body gets executed. Typically, this expression is a relational expression—that is, one that compares two values. ​ ​\tThe for loop is an entry-condition loop. This means the test expression is evaluated before each loop cycle. The loop never executes the loop body when the test expression is false. ​ ​\tUpdate-expression is evaluated at the end of the loop, after the body has been executed. Typically, it’s used to increase or decrease the value of the variable keeping track of the number of loop cycles. However, it can be any valid C++ expression, as can the other control expressions. This makes the for loop capable of much more than simply counting.\nTips:\n​\tA for statement looks something like a function call because it uses a name followed by paired parentheses. However, for’s status as a C++ keyword prevents the compiler from thinking for is a function. It also prevents you from naming a function for.\n​\tCommon C++ style is to place a space between for and the following parenthesis and to omit space between a function name and the following parenthesis:\n1 2 for (int i = 6; i \u0026lt; 10; ++i) smart_function(i); ​\tOther control statements, such as if and while, are treated similarly to for. This serves to visually reinforce the distinction between a control statement and a function call.\nwhile\nTh​\tThe while loop is a for loop stripped of the initialization and update parts; it has just a test condition and a body: 1 2 while (test_condition) body ​\tFirst, a program evaluates the parenthesized test-condition expression. If the expression evaluates to true, the program executes the statement(s) in the body.\n​\tAs with a for loop, the body consists of a single statement or a block defined by paired braces. After it finishes with the body, the program returns to the test condition and re-evaluates it. If the condition is nonzero, the program executes the body again.\n​\tThis cycle of testing and execution continues until the test condition evaluates to false Clearly, if you want the loop to terminate eventually, something within the loop body must do something to affect the test-condition expression\nfor Versus while:\nIn C++ the for and while loops are essentially equivalent. For example, the for loop\n1 2 3 4 for (init_expression; test_expression; update_expression) { statement(s) } could be rewritten this way:\n1 2 3 4 5 6 init_expression; while (test_expression) { statement(s) update_expression; } Similarly, the while loop\n1 2 while (test_expression) body could be rewritten this way:\n1 2 for ( ;test_expression;) body This for loop requires three expressions (or, more technically, one statement followed by two expressions), but they can be empty expressions (or statements). Only the two semicolons are mandatory. Incidentally, a missing test expression in a for loop is construed as true, so this loop runs forever:\n1 2 for ( ; ;) body Because for loops and while loops are nearly equivalent, the one you use is largely a matter of style.\nKeep in mind the following guidelines when you design a loop:\nIdentify the condition that terminates loop execution. Initialize that condition before the first test. Update the condition in each loop cycle before the condition is tested again. do while\nYo​\tYou’ve now seen the for loop and the while loop. The third C++ loop is the do while. It’s different from the other two because it’s an `exit-condition`loop. ​\tThat means this devil-may-care loop first executes the body of the loop and only then evaluates the test expression to see whether it should continue looping.If the condition evaluates to false, the loop terminates; otherwise,a new cycle of execution and testing begins.\n​\tSuch a loop always executes at least once because its program flow must pass through the body of the loop before reaching the test. Here’s the syntax for the do while loop:\ndo body while (test_expression)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ![do-while Loop](do_while_loop.png) - ***range-based for*** Th​\tThe C++11 adds a new form of loop called the range-based for loop. It simplifies one common loop task—that of doing something with each element of an array, or, more generally, of one of the container classes, such as vector or array, we\u0026#39;ll learn container later in lecture. Here is an example: ```cpp double prices[5] = {4.99, 10.99, 6.87, 7.99, 8.49}; std::vector\u0026lt;int\u0026gt; vi(10); std::iota(vi.begin(), vi,end(), 1); for (double p : prices) std::cout \u0026lt;\u0026lt; p \u0026lt;\u0026lt; std::endl; for (const int\u0026amp; i : vi) std::cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; 1 2 3 4 5 6 ​\tWhat else need to be mentioned is the ***Top-down design***. ​\tWith C, the idea is to break a large program into smaller, more manageable tasks. If one of these tasks is still too broad, you divide it into yet smaller tasks. You continue this process until the program is compartmentalized into small, easily programmed modules. C\u0026#39;s design facilitates this approach, encouraging you to develop program units called ***functions*** to represent individual task modules. ​\tAs you may have noticed, **the structured programming techniques reflect a procedural mind-set, thinking of a program in terms of the actions it perform.** The C++ Shift: Object-Oriented Programming ​\tAlthough the principle of structured programming improved the clarity, reliability, and ease of maintenance of programs, large-scale programming still remains a challenge. Object-Oriented Programming brings a new approach to that challenge. Unlike procedural programming, which emphasizes algorithms, OOP emphasizes the data. Rather than try to fit a problem to the procedural approach of language, OOP attempts to fit the language to the problem. The idea is to design data forms that correspond to the essential features of a problem. That data forms are called \u0026ldquo;Classes\u0026rdquo;.\n​\tThe OOP approach to program design is to first design classes that accurately represent those thing with which the program deals. Then you would proceed to design a program, suing objects of those classes. The process of going from a lower level of organization, such as classes, to a high level, such as program design, is called bottom-up programming. However, top-down programming and bottom-up programming are not contradictory.\nC++ and Generic Programming ​\tGeneric programming is yet another programming paradigm supported by C++. It shares with OOP the aim of making it simpler to reuse code and the technique of abstracting general concepts. But whereas OOP emphasizes the data aspect of programming, generic programming emphasizes independence from a particular data type. And its focus is different. OOP is a tool for managing large projects, whereas generic programming provides tools for performing common tasks, such as sorting data or merging lists. The term generic refers to code that is type independent. C++ data representations come in many types— integers, numbers with fractional parts, characters, strings of characters, and user-defined compound structures of several types. If, for example, you wanted to sort data of these various types, you would normally have to create a separate sorting function for each type. Generic programming involves extending the language so that you can write a function for a generic (that is, an unspecified) type once and use it for a variety of actual types. C++ templates provide a mechanism for doing that.\n","date":"2023-10-23T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%AC%E4%BA%8C%E8%8A%82/","title":"实验室 C++ 基础课程 · 第一章第二节"},{"content":"C++ Basic Course Chapter 1——Hello, C++! WHY C++? Popular\nAs a qualified programmer, you should know how to chase trends!\nTIOBE Index for September 2025\nFast \u0026amp;\u0026amp; Lower level control\nC++ is fast, including but not limited to\nits static type system, which reduces runtime overhead and its ability to allow direct memory access and management, thereby reducing additional runtime costs. What is C++? This is some C++ code\n1 2 3 4 5 6 #include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello, world!\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } This is also some C++ code! (code style before C99)\n1 2 3 4 5 6 7 #include \u0026#34;stdio.h\u0026#34; #include \u0026#34;stdlib.h\u0026#34; int main(int argc, char *argv) { printf(\u0026#34;%s\u0026#34; \u0026#34;Hello, world!\\n\u0026#34;); return EXIT_SUCCESS; } Also technically C++ code!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026#34;stdio.h\u0026#34; #include \u0026#34;stdlib.h\u0026#34; int main(int argc, char *argv) { asm( \u0026#34;sub\t$0x20,%rsp\\n\\t\u0026#34; \u0026#34;movabs\t$0x77202c6f6c6c6548,%rax\\n\\t\u0026#34; \u0026#34;mov\t%rax,(%rsp)\\n\\t\u0026#34; \u0026#34;movl\t$0x646c726f, 0x8(%rsp)\\n\\t\u0026#34; \u0026#34;movw\t$0x21, 0xc(%rsp)\\n\\t\u0026#34; \u0026#34;movb\t$0x0,0xd(%rsp)\\n\\t\u0026#34; \u0026#34;leaq\t(%rsp),%rax\\n\\t\u0026#34; \u0026#34;mov\t%rax,%rdi\\n\\t\u0026#34; \u0026#34;call\t__Z6mtputsPc\\n\\t\u0026#34; \u0026#34;add\t$0x20, %rsp\\n\\t\u0026#34; ); return EXIT_SUCCESS; } Code is getting longer and older\nAll that means C++ is backwards compatible with lower level languages! And neat!\nC++ History: Assembly Observe the following assembly code, make a guess about its purpose, and note any distinctive features of the code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 section\t.text global\t_start\t;must be declared for linker (ld) _start:\t;tell linker entry point mov edx,len\t;message length mov\tecx,msg\t;message to write mov\tebx,1\t;file descriptor (stdout) mov\teax,4\t;system call number (sys_write) int\t0x80\t;call kernel mov\teax,1\t;system call number (sys_exit) int 0x80\t;call kernel section\t.data msg\tdb\t\u0026#39;Hello, world!\u0026#39;,0xa\t;our dear string len\tequ\t$ - msg\t;length of our dear string Benefits:\nUnbelievable simple instructions Extremely fast (when well-written) Complete control over your program Why don’t we always use assembly?\nDrawbacks:\nA LOT of code to do simple tasks Very hard to understand Extremely unportable (hard to make work across all systems) C++ History: invention of C Problem: computers can only understand assembly!\nIdea:\nSource code can be written in a more intuitive language for humans. An additional program can convert it into assembly! This additional program is called a compiler! Based on the above concepts, Ken Thompson and Dennis Ritchie created C in 1972, to much praise.\n![Ken Thompson and Dennis Ritchie](Ken Thompson and Dennis Ritchie.png)\nC made it easy to write code that was:\nFast Simple Cross-platform C was popular because it was simple, this was also its weakness：\nNo Objects or classes Difficult to write generic code Tedious when writing large programs C++ History: Welcome to C++ In 1983, the beginnings of C++ were created by Bjarne Stroustrup.\n![Bjarne Stroustrup](Bjarne Stroustrup.png)\nHe wanted a language that was:\nFast Simple to use Cross-platform Had high-level features C++ History: Evolution of C++ Design Philosophy of C++ Only add features if they solve an actual problem This principle emphasizes that new language features should be added to address real-world programming problems rather than introducing complexity for its own sake. It helps maintain the simplicity and maintainability of the language. Programmers should be free to choose their own style C++ provides multiple programming paradigms (such as procedural, object-oriented, and generic programming) and doesn\u0026rsquo;t impose a specific coding style. This allows programmers to write code according to their own needs and preferences. Not code style Compartmentalization is key This means that programs should be broken down into small, independent modules, each responsible for specific tasks. Modular code is easier to maintain, test, and reuse. Allow the programmer full control if they want it C++ offers low-level memory access and operations to satisfy the needs of programmers who require a higher degree of control. This is valuable for system programming and performance optimization. Don\u0026rsquo;t sacrifice performance except as a last resort C++ places a high priority on performance and encourages programmers to write efficient code. Performance should only be sacrificed when there are no other alternatives. Enforce safety at compile time whenever possible C++ strives to catch and prevent common programming errors, such as type errors and null pointer references, at compile time. This reduces runtime errors, enhancing code quality and reliability. But\u0026hellip; Back to that question: what is C++? See you tomorrow!\n","date":"2023-10-22T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%AC%E4%B8%80%E8%8A%82/","title":"实验室 C++ 基础课程 · 第一章第一节"},{"content":"C++基础课程 第零章——工欲善其事必先利其器 0.提前说明 本课程均以Windows 11系统作为示例，若为Linux或者MacOS可另外课外提问或自己查阅资料。\n个人建议，少用百度，能则Google，不行的话Bing体验也不错。\n第二节——C++开发环境配置 一般地，你可以使用集成开发环境（Integrated Development Environment, AKA IDE）或者自行配置编译器 + 编辑器来进行C++开发。\nIDEs Visual Studio\n在官网下载Visual Studio 2022 Community Edition\n只选择使用C++的桌面开发足够，之后也可在Visual Studio Installer中选择修改\nCLion\n请注意，在使用 CLion 之前你可能需要在 JetBrains 官网申请 JetBrains Product Pack for Students.\n官网下载安装好后登陆你的 JetBrains 账户激活 License 即可。\nCode::Blocks\n官网下载即可，如果你本地已有编译器则下载 codeblocks-25.03-setup.exe 即可，如果没有的话则下载 codeblocks-25.03mingw-setup.exe。\n编译器 + 编辑器 编译器\n只介绍 MinGW-w64（Minimalist GNU for Windows）。\n在官网可以看到下载地址\n下载好压缩包并解压后，windows 搜索“编辑系统环境变量”，打开。\n找到系统变量 Path，新建变量，变量的值为刚才解压的文件夹的bin目录的绝对路径。\n终端输入g++ -v进行检测\n编辑器\nVisual Studio Code\nVSCode 世界第一！\n官网下载安装\n拓展支持\nVSCode支持海量拓展！在此推荐几乎为必要的插件：\nChinese (Simplified) (简体中文) Language Pack for Visual Studio Code\n如果你想锻炼英语的话，不推荐安装\nC/C++\n貌似内置了，不太清楚了\nCode Runner\nCode Runner 的好处在于方便，不用编写配置的json文件\n配置编辑器\n创建一个新目录，在vscode中打开\n新建一个文件夹，并命名为.vscode。然后再在.vscode文件夹下新建三个文件，分别为：（或者当你新建一个工作空间时，会自动生成.vscode） 1. tasks.json 2. launch.json 3. c_cpp_properties.json\n编辑task.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 { \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;cppbuild\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;C/C++: g++.exe 生成活动文件\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;Your_G++_Path\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-fdiagnostics-color=always\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;${file}\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34; }, \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$gcc\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;detail\u0026#34;: \u0026#34;调试器生成的任务。\u0026#34; } ], \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34; } 编辑launch.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;g++.exe - Build and debug active file\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;MIMode\u0026#34;: \u0026#34;gdb\u0026#34;, \u0026#34;miDebuggerPath\u0026#34;: \u0026#34;Your_GDB_Path\u0026#34;, \u0026#34;setupCommands\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Enable pretty-printing for gdb\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-enable-pretty-printing\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true } ], \u0026#34;preLaunchTask\u0026#34;: \u0026#34;C/C++: g++.exe 生成活动文件\u0026#34; } ] } externalConsole ：这个配置表明是否启动控制台， true 会出现额外的黑窗口， false 则会调用内置终端。由于黑窗口运行完之后会直接关闭，不利于查看运行结果，所以推荐设为 false ，这样就可以在终端中看到结果了。\nmiDebuggerPath ：调试器的路径。我们用 gdb 作为调试器，所以路径为mingw64/bin/gdb.exe\npreLaunchTask ：前置运行任务，这里要和 tasks.json 里边的 label 属性一样。\n因为调试前需要先编译出可执行文件，所以这里需要调用编译可执行文件的配置，先去执行编译任务，再进行debug。\n也就是会先去调用前面的 tasks.json 里边定义的任务，生成一个 .exe 的文件。\n编辑c_cpp_properties.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Win32\u0026#34;, \u0026#34;includePath\u0026#34;: [ \u0026#34;${workspaceFolder}/**\u0026#34; ], \u0026#34;defines\u0026#34;: [ \u0026#34;_DEBUG\u0026#34;, \u0026#34;UNICODE\u0026#34;, \u0026#34;_UNICODE\u0026#34; ], \u0026#34;compilerPath\u0026#34;: \u0026#34;Your_GCC_Path\u0026#34;, \u0026#34;intelliSenseMode\u0026#34;: \u0026#34;windows-gcc-x64\u0026#34; \u0026#34;cppStandard\u0026#34;: \u0026#34;c++23\u0026#34;, \u0026#34;cStandard\u0026#34;: \u0026#34;c23\u0026#34; } ], \u0026#34;version\u0026#34;: 4 } includePath ：头文件的位置，这里的 ${workspaceFolder}/**，“/”前为一个 vscode 变量，值为工作区路径（工作区就是你当前打开的文件夹），“/”后的“**”的意思是递归向下寻找。如果你需要安装 C++ 第三方库，请看后面的 Q\u0026amp;A。头文件库默认包含了 C++ 标准库，无需指定。\ncompilepath ：编译器路径，C++ 扩展会从 path 环境变量中自动寻找 gcc 的路径，如果这个路径找不到，请手动设置。 intelliSenseMode ：选择当前的平台和编译器，我们是在 windows 平台上使用 gcc 作为编译器，所以填 windows-gcc-x64。 cppStandard \u0026amp; cStandard ：指定 C 和 C++标准。为了不影响代码编写（指某些奇怪的红色波浪线），同时享受新标准的便利，请至少设为 c++17 或以上和 c11 以上。我们所用的 gcc 12.2.0 已经部分支持 c++23 和 c++20 。 以上的这些选项，也可以在设置-\u0026gt;C/C++中寻找相同的选项进行配置，我觉得会更加友好。\nSublime Text\n官网下载安装\n创建 C++ 项目:\n使用 Sublime Text 创建一个文件夹，将你的 C++ 项目文件添加到文件夹中。打开 Sublime Text，然后选择 \u0026ldquo;File\u0026rdquo; -\u0026gt; \u0026ldquo;Open Folder\u0026rdquo;，选择你的项目文件夹。\n配置编译系统:\n在 Sublime Text 中，选择 \u0026ldquo;Tools\u0026rdquo; -\u0026gt; \u0026ldquo;Build System\u0026rdquo; -\u0026gt; \u0026ldquo;New Build System\u0026rdquo;，然后在新文件中输入适合你的 C++ 编译器的配置。以下是一个示例配置用于 MinGW：\n1 2 3 4 5 { \u0026#34;shell_cmd\u0026#34;: \u0026#34;g++ -std=c++11 -o \\\u0026#34;$file_base_name\\\u0026#34; \\\u0026#34;$file\\\u0026#34;\u0026#34;, \u0026#34;working_dir\u0026#34;: \u0026#34;$file_path\u0026#34;, \u0026#34;selector\u0026#34;: \u0026#34;source.c++\u0026#34; } 构建和运行代码:\n编辑你的 C++ 代码文件，然后按 Ctrl + B 来编译和运行代码。Sublime Text 将使用你配置的编译系统执行编译操作，并在输出面板中显示编译结果。\n","date":"2023-10-18T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E9%9B%B6%E7%AB%A0%E7%AC%AC%E4%BA%8C%E8%8A%82/","title":"实验室 C++ 基础课程 · 第零章第二节"},{"content":"第零章——工欲善其事必先利其器 0.提前说明 本课程均以 Windows 11 系统作为示例，若为 Linux 或者 MacOS 可另外课外提问或自己查阅资料。\n个人建议，少用百度，能则 Google，不行的话 Bing 体验也不错。\n第一节——Git 及 Github/Gitee 的使用 0. 0自主学习 你也可以通过 GitHub 官方文档快速入门或者其他有关网站来自主学习。\n如果不想使用 CLI，你也可以下载并安装 GitHub Desktop 客户端，请参照 GitHub 官方文档 GitHub Desktop 使用入门自主学习，本课程对此不作教学。\n0.1 为什么是Git？ 版本管理： Git 允许开发人员追踪项目的不同版本和修改，以便可以随时回退到之前的版本，查看修改历史，比较不同版本之间的差异，以及解决冲突。这对于协作开发和维护软件项目非常重要。 协作： Git 是分布式版本控制系统，允许多个开发人员同时在同一项目上工作。开发人员可以在各自的本地仓库上工作，然后将其更改推送到共享的远程仓库。这使得团队协作更加高效，每个人都可以独立工作，而不会干扰其他人的工作。 分支管理： Git 使得创建、合并和管理分支变得非常容易。开发人员可以创建新分支来开展新的功能开发或修复问题，而不会影响主分支。一旦工作完成，可以将分支合并回主分支。 备份和恢复： Git 提供了对项目的完整历史记录的备份。即使在本地计算机出现故障或远程服务器遇到问题时，您仍可以从备份中恢复项目状态。 分布式架构： Git 的分布式性质使得每个开发人员都有整个项目的拷贝，这降低了对中央服务器的依赖。即使中央服务器出现故障，开发人员仍然可以继续工作。 开源社区： Git 是许多开源项目的首选版本控制系统，因此学习Git可以更容易地参与和贡献开源项目。 跨平台支持： Git 可在多种操作系统上运行，包括 Windows、Linux 和 MacOS，因此可以满足不同开发环境的需求。 顺应潮流： 聪明的开发人员应该顺应潮流。Git 正在被越来越多的知名公司和开源项目所使用，如 Ruby On Rails，jQuery，Perl，Debian，Linux 内核等等。拥有一个大型的用户群体是一个很大优势，因为往往会存在很多系统去推动他的发展。大量的教程，工具和服务，这让 Git 更加具有吸引力。 1. 安装Git 进入官网，根据自己的系统选择下载即可，如果下载太慢可以下载群文件里的。\n注意在 Select Components 时一定要选上 Git Bash Here（其实会自动勾选）。\n2. 创建 GitHub/Gitee 账户 Github 账户的创建\n如果你能创建 GitHub 账户，那么大概率你能翻墙了，想必也不用多教了，如果你不能翻墙，那你创建GitHub 账户也没什么用。 Gitee 账户的创建\n官网自行注册即可 3. Git 基础命令的使用 接下来请紧跟步骤尝试自己创建并上传一个仓库，在此过程中熟悉Git的基础使用。\n配置信息，这些信息将出现在你的 Git 提交中\ngit config \u0026ndash;global user.name \u0026ldquo;Your Name\u0026rdquo; git config \u0026ndash;global user.email \u0026ldquo;youremail@example.com\u0026rdquo; 创建仓库\n对于 Windows 系统，创建一个新的文件夹，右键选择显示更多选项-Git Bash Here\n对于 MacOS 或 Linux 系统，打开 terminal 即可\n直接输入git，你可以看到常用指令及用处\n输入 git init 以创建一个空的git repo。\n创建一个 README.md，随便向其写入内容，使用 git add 指令将其添加到暂存区（Staging Area）中。你可以使用 git add filename 将单个指定文件添加到 git repo 中，或者使用 git add . 将所有新修改文件添加到暂存区（Staging Area）中，或者使用 git add directory/ 添加指定目录下的所有修改文件到暂存区（Staging Area）。\n使用 git commit 命令将在暂存区（Staging Area）中的文件快照保存到本地仓库中，每个 git commit 创建的提交对象都有一个唯一的哈希值，用于标识版本。这使得你可以随时回滚到先前的版本，比较不同版本之间的差异，以及追踪代码的演变。具体用法为 git commit -m \u0026quot;commit message\u0026quot;，提交信息用于描述本次提交的目的，这十分有用。\n你也可以使用 -a 选项来跳过 git add 步骤，将工作目录中的所有更改（包括已被跟踪的文件）添加到暂存区并提交，但要小心使用它，因为它不会包含新添加的未跟踪文件。具体用法为 git commit -a -m \u0026quot;Commit message\u0026quot; 你可以使用 git status 显示当前工作目录和暂存区的状态，以便你了解哪些文件已被修改、添加到暂存区或尚未被跟踪。接下来修改 README.md 的内容，创建 casually1.txt，casully2.txt 两个文件，将 casually1.txt 添加到暂存区。此时使用 git status，你就可以查看到三种状态 Changes to be committed, Changes not staged for commit, Untracked files。\n未跟踪的文件 (Untracked files)：这是工作目录中未被 Git 跟踪的文件。这些文件不在 Git 的版本控制之下。\n已修改的文件 (Changes not staged for commit)：这是工作目录中已被修改但尚未添加到暂存区的文件。\n已暂存的文件 (Changes to be committed)：这是已经添加到暂存区，等待被提交的文件。\n使用 git log 指令打印仓库提交日志。\ngit 分支指令可能对你们目前来说暂时使用较少，本课程暂时不涉及。\n你可以在此网站以游戏的方式学习并巩固你的 git 指令。\n使用 SSH 完成 Git 与 GitHub/Gitee 的绑定\n在 Git Bash 中输入 ssh，可以查看指令及参数。\n输入 ssh-keygen -t rsa 指定 RSA 算法生成密钥，然后敲三次回车键。\n使用 cat ~/.ssh/id_rsa.pub 获取公钥。\n如果你是用的是 GitHub，在 Settings -- SSH and GPG keys 处选择 New SSH key，输入 title 和 key 即可，title 可随意。\n如果你使用的是 Gitee，在设置-安全设置-SSH公钥处添加。\n将本地仓库推送到 Github/Gitee\n在 GitHub/Gitee 创建新仓库\nGitHub 可在主页或者 Repositories 处找到 new 按钮\nGitee可在点击主页右上角加号找到新建仓库按钮\n推送本地仓库，执行 GitHub/Gitee 给出的官方指令即可\n推送本地更新\n当你更改了本地仓库之后，需要将本地仓库同步到 GitHub/Gitee 上。具体步骤为 1 2 3 4 git add filename / git add . git commit -m \u0026#34;Updated nothing\u0026#34; git pull git push git pull:\ngit pull 用于从远程仓库拉取（获取）更新并将其合并到你的当前本地分支。它执行以下操作：\n检查当前所在分支。 从远程仓库获取最新的提交。 将这些提交合并到你的当前分支。 基本语法如下：git pull remote_repo \u0026quot;branch\u0026quot;。如果不指定远程仓库和分支，git pull 将默认拉取与当前本地分支关联的远程分支的更新。\ngit push:\ngit push 用于将本地的提交推送到远程仓库。它执行以下操作：\n将本地的提交上传到远程仓库。 更新远程仓库中的分支，以包含你的提交。 基本语法如下：git push [远程仓库] [本地分支]:[远程分支]\n[远程仓库] 是远程 Git 仓库的名称（通常是别名，如 origin）。 [本地分支] 是你要推送的本地分支。 [远程分支] 是你要将本地分支的提交推送到的远程分支。 例如，要将当前分支的更改推送到远程仓库的同名分支，你可以使用：git push origin my-branch\n这将把 my-branch 的更改推送到 origin 远程仓库的 my-branch 分支上。\n默认情况下，git push 命令将推送当前分支的更改到与之关联的远程分支。这意味着 Git 将尝试将你当前所在的分支的提交推送到远程仓库中同名的分支。\n克隆仓库\n尝试将本课程的仓库克隆到本地\n创建一个新的目录，并且在该目录打开Git Bash。\n克隆GitHub仓库\nGitHub仓库地址：https://github.com/EvanWonghere/211LabLectures\n选择Code - Local - Clone - SSH然后复制。\n在Git Bash输入git clone git@github.com:EvanWonghere/211LabLectures.git即可。 克隆Gitee仓库\nGitee仓库地址：https://gitee.com/yufenghuang/211LabLectures\n选择`克隆/下载 - SSH - 复制。\n在Git Bash输入git clone git@gitee.com:yufenghuang/211LabLectures.git即可。\n","date":"2023-10-17T00:00:00Z","permalink":"http://localhost:1313/p/%E5%AE%9E%E9%AA%8C%E5%AE%A4-c-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E9%9B%B6%E7%AB%A0%E7%AC%AC%E4%B8%80%E8%8A%82/","title":"实验室 C++ 基础课程 · 第零章第一节"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""}]